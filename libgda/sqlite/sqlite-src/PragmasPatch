--- sqlite3.c.orig	2014-11-08 15:04:07.918458139 +0100
+++ sqlite3.c	2014-11-08 15:04:12.087540578 +0100
@@ -98888,6 +98888,24 @@
   return azModeName[eMode];
 }
 
+static char *gdauniqueFuncName (FuncDef *func)
+{
+	char *sname;
+	unsigned int order = 0;
+	FuncDef *n;
+	int size;
+	for (n = func->pNext; n; n = n->pNext)
+		order++;
+
+	size = strlen (func->zName) + 25;
+	sname = sqlite3_malloc (sizeof (char) * size);
+	if (func->nArg < 0)
+		snprintf (sname, size-1, "%s_ANY_%u", func->zName, order);
+	else
+		snprintf (sname, size-1, "%s_%d_%u", func->zName, func->nArg, order);
+	return sname;
+}
+
 /*
 ** Process a pragma statement.  
 **
@@ -99614,6 +99632,54 @@
 
 #ifndef SQLITE_OMIT_SCHEMA_PRAGMAS
   /*
+  **   PRAGMA proc_list
+  **
+  ** Return a single row for each procedure, the returned data set are:
+  **
+  ** name:         Procedure name
+  ** is_aggregate: True is procedure is an aggregate
+  ** nargs:        Number of arguments of the procedure, or -1 if unlimited
+  ** spe_name:     Specific name (unique procedure name)
+  */
+  if( sqlite3StrICmp(zLeft, "proc_list")==0 ){
+    if( sqlite3ReadSchema(pParse) ) goto pragma_out;
+
+    sqlite3VdbeSetNumCols(v, 4);
+    pParse->nMem = 4;
+    sqlite3VdbeSetColName(v, 0, COLNAME_NAME, "name", SQLITE_STATIC);
+    sqlite3VdbeSetColName(v, 1, COLNAME_NAME, "is_aggregate", SQLITE_STATIC);
+    sqlite3VdbeSetColName(v, 2, COLNAME_NAME, "nargs", SQLITE_STATIC);
+    sqlite3VdbeSetColName(v, 3, COLNAME_NAME, "spe_name", SQLITE_STATIC);
+    int j;
+    for(j=0; j<ArraySize(db->aFunc.a); j++){
+      FuncDef *func;
+      for (func =db->aFunc.a[j]; func; func = func->pNext) {
+	char *sname;
+	sname = gdauniqueFuncName (func);
+	sqlite3VdbeAddOp4(v, OP_String8, 0, 1, 0, func->zName, 0);
+	sqlite3VdbeAddOp2(v, OP_Integer, func->xFinalize ? 1 : 0, 2);
+	sqlite3VdbeAddOp2(v, OP_Integer, func->nArg, 3);
+	sqlite3VdbeAddOp4(v, OP_String8, 0, 4, 0, sname, 0);
+	sqlite3VdbeAddOp2(v, OP_ResultRow, 1, 4);
+	sqlite3_free (sname);
+      }
+    }
+    for(j=0; j<ArraySize(sqlite3GlobalFunctions.a); j++){
+      FuncDef *func;
+      for (func =sqlite3GlobalFunctions.a[j]; func; func = func->pNext) {
+	char *sname;
+	sname = gdauniqueFuncName (func);
+	sqlite3VdbeAddOp4(v, OP_String8, 0, 1, 0, func->zName, 0);
+	sqlite3VdbeAddOp2(v, OP_Integer, func->xFinalize ? 1 : 0, 2);
+	sqlite3VdbeAddOp2(v, OP_Integer, func->nArg, 3);
+	sqlite3VdbeAddOp4(v, OP_String8, 0, 4, 0, sname, 0);
+	sqlite3VdbeAddOp2(v, OP_ResultRow, 1, 4);
+	sqlite3_free (sname);
+      }
+    }
+  }else
+
+ /*
   **   PRAGMA table_info(<table>)
   **
   ** Return a single row for each column of the named table. The columns of
