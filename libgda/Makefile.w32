HEADERS = gda-blob.h \
	gda-client.h \
	gda-command.h \
	gda-config.h \
	gda-connection.h \
	gda-data-model-array.h \
	gda-data-model-hash.h \
	gda-data-model-list.h \
	gda-data-model.h \
	gda-error.h \
	gda-field.h \
	gda-intl.h \
	gda-log.h \
	gda-marshal.h \
	gda-parameter.h \
	gda-quark-list.h \
	gda-row.h \
	gda-select.h \
	gda-server-provider.h \
	gda-table.h \
	gda-transaction.h \
	gda-util.h \
	gda-value.h \
	gda-xml-connection.h \
	gda-xml-database.h \
	gda-xml-document.h \
	gda-xql-atom.h \
	gda-xql-bin.h \
	gda-xql-column.h \
	gda-xql-const.h \
	gda-xql-delete.h \
	gda-xql-dml.h \
	gda-xql-dual.h \
	gda-xql-field.h \
	gda-xql-func.h \
	gda-xql-insert.h \
	gda-xql-item.h \
	gda-xql-join.h \
	gda-xql-list.h \
	gda-xql-query.h \
	gda-xql-select.h \
	gda-xql-stack.h \
	gda-xql-target.h \
	gda-xql-update.h \
	gda-xql-utils.h \
	gda-xql-value.h \
	gda-xql-valueref.h \
	libgda.h \


NAMES = gda-blob.o \
	gda-data-model-list.o  \
	gda-log.o \
	gda-table.o \
	gda-xql-atom.o \
	gda-xql-field.o \
	gda-xql-select.o \
	gda-client.o \
	gda-data-model.o \
	gda-transaction.o \
	gda-xql-bin.o \
	gda-xql-func.o \
	gda-xql-stack.o \
	gda-command.o \
	gda-enum-types.o \
	gda-parameter.o \
        gda-util.o \
	gda-xql-column.o \
	gda-xql-insert.o \
	gda-xql-target.o \
	gda-config.o \
	gda-error.o \
	gda-quark-list.o \
	gda-value.o \
	gda-xql-const.o \
	gda-xql-item.o \
	gda-xql-update.o \
	gda-connection.o \
	gda-export.o \
	gda-row.o \
	gda-xml-connection.o \
	gda-xql-delete.o \
	gda-xql-join.o \
	gda-xql-utils.o \
	gda-data-model-array.o \
	gda-field.o \
	gda-select.o \
	gda-xml-database.o \
	gda-xql-dml.o \
	gda-xql-list.o \
	gda-xql-value.o \
	gda-data-model-hash.o \
	gda-init.o \
	gda-server-provider.o \
	gda-xml-document.o \
	gda-xql-dual.o \
	gda-xql-query.o \
	gda-xql-valueref.o
  
OBJECTS = $(patsubst %.o, .libs/%.o, $(NAMES))

SQLNAMES = lexer.o  mem.o  parser.o  sql_display.o  sql_parser.o  sql_parser_test.o  sql_tree.o
SQLOBJECTS = $(patsubst %.o, ../libsql/.libs/%.o, $(SQLNAMES))

 
all:  gda-enum-types.c gda-enum-types.h gda-marshal.h libgda.dll libgda.def







libgda.dll : $(OBJECTS) $(SQLOBJECTS)
	$(CC)  -shared  $(SQLOBJECTS) $(OBJECTS) $(LIBDIRS) $(LIBS)  -o libgda.dll \
	$(DVALUES) $(IPATHS) $(WFLAGS)  \
        -Wl,--out-implib,libgda.dll.a
 
libgda.def : libgda.dll
	$(DLLTOOL)  -z  libgda.def  --export-all-symbol libgda.dll 





$(OBJECTS) : $(patsubst .libs/%.o, %.c, $(OBJECTS))
	$(CC) $(DVALUES) $(IPATHS) $(WFLAGS)  -O2 -MD -MP \
		-MT $(patsubst .libs/%.o, %.lo, $@) \
		-MF $(patsubst .libs/%.o, .deps/%.Tpo, $@) \
		-c $(patsubst .libs/%.o, %.c, $@)  -o $@
	

gda-enum-types.c : $(HEADERS);
	$(GLIBMKENUMS) \
	--fhead '#include <libgda/libgda.h>\n' \
	--fhead '#include <glib-object.h>' \
	--fprod '\n/* enumerations from "@filename@" */' \
	--vhead 'GType\n@enum_name@_get_type (void)\n{\n  static GType etype = 0;\n  if (etype == 0) {\n static const G@Type@Value values[] = {' \
	--vprod '      { @VALUENAME@, "@VALUENAME@", "@valuenick@" },' \
	--vtail '      { 0, NULL, NULL }\n    };\n    etype = g_@type@_register_static ("@EnumName@", values);\n  }\n  return etype;\n}\n' \
	$(HEADERS)  > gda-enum-types.c

gda-enum-types.h : $(HEADERS)
	$(GLIBMKENUMS) \
	--fhead '#ifndef __LIBGDA_ENUM_TYPES_H__\n#define __LIBGDA_ENUM_TYPES_H__\n\n#include <glib-object.h>\n\nG_BEGIN_DECLS\n' \
	--fprod '/* enumerations from "@filename@" */\n' \
	--vhead 'GType @enum_name@_get_type (void);\n#define GDA_TYPE_@ENUMSHORT@ (@enum_name@_get_type())\n' \
	--ftail 'G_END_DECLS\n\n#endif /* __LIBGDA_ENUM_TYPES_H__ */' \
	$(HEADERS)  > gda-enum-types.h
	
gda-marshal.h : gda-marshal.list
	$(GLIBGENMARSHAL)  gda-marshal.list  --header --prefix=gda_marshal > gda-marshal.h

 

clean:
	rm .libs/*; \
	rm gda-enum-types.h; \
	rm gda-enum-types.c; \
	rm gda-marshal.h; \
	rm libgda.dll; \
	rm libgda.dll.a; \
	rm libgda.def; \