AC_PREREQ(2.52)
AC_INIT(libgda/libgda.h)

GDA_MAJOR_VERSION=0
GDA_MINOR_VERSION=8
GDA_MICRO_VERSION=103
GDA_VERSION=$GDA_MAJOR_VERSION.$GDA_MINOR_VERSION.$GDA_MICRO_VERSION

AC_SUBST(GDA_MAJOR_VERSION)
AC_SUBST(GDA_MINOR_VERSION)
AC_SUBST(GDA_MICRO_VERSION)
AC_SUBST(GDA_VERSION)

#
# Making releases:
# - If interfaces have been changed or added, set GDA_CURRENT += 1 and GDA_AGE += 1, set GDA_REVISION to 0.
# - If binary compatibility has been broken (e.g. removed or changed interfaces), set GDA_CURRENT += 1, GDA_REVISION and GDA_AGE to 0
# - If interfaces is the same as the previous version, set GDA_REVISION += 1
#
GDA_CURRENT=1
GDA_REVISION=0
GDA_AGE=0

AC_SUBST(GDA_CURRENT)
AC_SUBST(GDA_REVISION)
AC_SUBST(GDA_AGE)

AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(libgda, $GDA_VERSION)

AM_MAINTAINER_MODE

AC_PROG_INTLTOOL([0.11])

GNOME_PLATFORM_GNOME_2(yes, force)

dnl ******************************
dnl Checks for programs
dnl ******************************
AC_ISC_POSIX
AC_PROG_CC
AC_PROG_CXX
AC_STDC_HEADERS
AM_PROG_LIBTOOL

ORBIT_IDL="`$PKG_CONFIG --variable=orbit_idl ORBit-2.0`"
AC_SUBST(ORBIT_IDL)

BONOBO_ACTIVATION_IDL_DIR="`$PKG_CONFIG --variable=idldir bonobo-activation-2.0`"
AC_SUBST(BONOBO_ACTIVATION_IDL_DIR)

BONOBO_IDL_DIR="`$PKG_CONFIG --variable=idldir libbonobo-2.0`"
AC_SUBST(BONOBO_IDL_DIR)

dnl ******************************
dnl glib-genmarshal
dnl ******************************
AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

dnl ******************************
dnl Translations
dnl ******************************
GETTEXT_PACKAGE=libgda-2
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE")
ALL_LINGUAS="ca da de el es fi fr ga gl hu it ja ms nl no pl pt pt_BR ru sk sl sv tr uk"
AM_GLIB_GNU_GETTEXT

dnl ******************************
dnl GConf schemas
dnl ******************************
AC_PATH_PROG(GCONFTOOL, gconftool-2)
AM_GCONF_SOURCE_2

dnl ******************************
dnl Checks for libraries
dnl ******************************
GNOME_COMPILE_WARNINGS(maximum)
CFLAGS="$CFLAGS $WARN_CFLAGS"
CPPFLAGS="$CPPFLAGS $WARN_FLAGS"
AC_SUBST(CFLAGS)
AC_SUBST(CPPFLAGS)
AC_SUBST(LDFLAGS)

PKG_CHECK_MODULES(LIBGDA, ORBit-2.0 >= 2.3.91 glib-2.0 >= 1.3.10 gobject-2.0 >= 1.3.1 gthread-2.0 >= 1.3.1 bonobo-activation-2.0 >= 0.7.0 libbonobo-2.0 libxml-2.0 gconf-2.0 libxslt >= 1.0.9 gnome-vfs-2.0)
AC_SUBST(LIBGDA_CFLAGS)
AC_SUBST(LIBGDA_LIBS)

dnl ******************************
dnl gtk-doc
dnl ******************************
AC_CHECK_PROG(GTKDOC, gtkdoc-mkdb, true, false)
AM_CONDITIONAL(HAVE_GTK_DOC, $GTKDOC)
AC_SUBST(HAVE_GTK_DOC)

AC_ARG_ENABLE(gtk-doc, [  --enable-gtk-doc	Use gtk-doc to build documentation [default=auto]], enable_gtk_doc="$enableval", enable_gtk_doc=auto)

if test x$enable_gtk_doc = xauto ; then
	if test x$GTKDOC = xtrue ; then
		enable_gtk_doc=yes
	else
		enable_gtk_doc=no
	fi
fi

AM_CONDITIONAL(ENABLE_GTK_DOC, test x$enable_gtk_doc = xyes)

dnl ******************************
dnl Checks for providers
dnl ******************************

dnl Test for ODBC
AC_ARG_WITH(odbc,
[  --with-odbc=<directory>	use ODBC libraries in <directory>],[
if test $withval != yes
then
	dir=$withval
else
	dir="/usr/local"
fi
odbcdir=""
AC_MSG_CHECKING(for ODBC files)
for d in $dir /usr /usr/local
do
	if test -f $d/lib/libodbc.so
	then
		AC_MSG_RESULT(found ODBC in $d)
		odbclib="-lodbc"
		odbcdir=$d
		break
	fi
	if test -f $d/lib/libiodbc.so
	then
		AC_MSG_RESULT(found iODBC in $d)
		odbclib="-liodbc"
		odbcdir=$d
		break
	fi
done
if test x$odbcdir = x
then
	AC_MSG_WARN(ODBC backend not used)
else
	AC_DEFINE(HAVE_ODBC)
	ODBC_CFLAGS="-I${odbcdir}/include"
	ODBC_LIBS="-L${odbcdir}/lib ${odbclib}"
fi
])

AM_CONDITIONAL(ODBC, test x$odbcdir != x)

dnl Test for MySQL
AC_ARG_WITH(mysql,
[  --with-mysql=<directory>	use mysql backend in <directory>],[
if test $withval != yes
then
	dir=$withval
else
	dir="/usr/local"
fi
mysqldir=""
AC_MSG_CHECKING(for MySQL files)
for d in $dir /usr /usr/local /usr/local/mysql /opt/mysql /opt/packages/mysql
do
	if test -f $d/include/mysql/mysql.h
	then
		mysqldir_suffix=/mysql
	else
		mysqldir_suffix=
	fi
	if test -f $d/lib/mysql/libmysqlclient.a -o -f $d/lib/libmysqlclient.so
	then
		AC_MSG_RESULT(found mysql in $d)
		mysqldir=$d
		mysqllibdir_suffix=/mysql
		break
	fi
	if test -f $d/lib/libmysqlclient.a -o -f $d/lib/libmysqlclient.so
	then
		AC_MSG_RESULT(found mysql in $d)
		mysqldir=$d
		mysqllibdir_suffix=
		break
	fi
done
if test x$mysqldir = x
then
	AC_MSG_WARN(MySQL backend not used)
else
	AC_DEFINE(HAVE_MYSQL)
	MYSQL_CFLAGS="-I${mysqldir}/include${mysqldir_suffix}"
	MYSQL_LIBS="-L${mysqldir}/lib${mysqllibdir_suffix} -lmysqlclient"
	if test -f ${mysqldir}/lib${mysqllibdir_suffix}/libmystrings.a
	then
		MYSQL_LIBS="${MYSQL_LIBS} -lmystrings"
	fi
fi
])

AM_CONDITIONAL(MYSQL, test x$mysqldir != x)

dnl Test for PostgreSQL
AC_ARG_WITH(postgres,
[  --with-postgres=<directory>	use postgres backend in <directory>],[
if test $withval != yes
then
	dir=$withval
else
	dir="/usr/local"
fi
AC_MSG_CHECKING(for Postgres files)
postgresdir=""
for d in $dir /usr /usr/local/postgres /opt/postgres /opt/packages/postgres /disk/postgres /usr/local/pgsql
do
	if test -f $d/lib/libpq.so
	then
		AC_MSG_RESULT(found Postgres in $d)
		postgresdir=$d
		break
	fi
done
if test x$postgresdir = x
then
	AC_MSG_WARN(Postgres backend not used)
else
	if test -f ${postgresdir}/include/libpq-fe.h
	then
		POSTGRES_CFLAGS=-I${postgresdir}/include
	elif test -f ${postgresdir}/include/pgsql/libpq-fe.h
	then
		POSTGRES_CFLAGS=-I${postgresdir}/include/pgsql
	elif test -f ${postgresdir}/include/postgresql/libpq-fe.h
	then
		POSTGRES_CFLAGS=-I${postgresdir}/include/postgresql
	else
		AC_MSG_WARN(Postgres include files not found, backend not used)
		postgresdir=""
	fi
	POSTGRES_LIBS="-L${postgresdir}/lib -lpq"
	AC_DEFINE(HAVE_POSTGRES)
fi
])

AM_CONDITIONAL(POSTGRES, test x$postgresdir != x)

dnl Test for freetds provider
AC_ARG_WITH(tds,
[  --with-tds=<directory>	use freetds library in <directory>],[
if test $withval != yes
then
	dir=$withval
else
	dir="/usr/local/freetds"
fi
AC_MSG_CHECKING(for freetds files)
freetdsdir=""
for d in $dir /usr/local/freetds /opt/freetds /opt/packages/freetds /opt/freetds-0.50
do
	if test -f $d/include/ctpublic.h
	then
		AC_MSG_RESULT(found freetds in $d)
		freetdsdir=$d
		break
	fi
done
if test x$freetdsdir = x
then
	AC_MSG_WARN(tds backend not used)
else
	TDS_CFLAGS=-I${freetdsdir}/include
	TDS_LIBS="-L${freetdsdir}/lib -lct"
	AC_DEFINE(HAVE_TDS)
fi
])

AM_CONDITIONAL(TDS, test x$freetdsdir != x)

dnl Test for Sybase
AC_ARG_WITH(sybase,
[  --with-sybase=<directory>	use Sybase backend in <directory>],[
AC_MSG_CHECKING(for Sybase files)
if test $withval != yes
then
	dir=$withval
else
	dir="/opt2/sybase"
fi
sybasedir=""
for d in $dir /usr/local/sybase /opt/sybase /opt/packages/sybase
do
	if test -f "$d/include/ctpublic.h"
	then
		AC_MSG_RESULT(found Sybase in $d)
		sybasedir="$d"
		break
	fi
	for v in 11.9.2 11.0.3.3
	do
		if test -f "$d-$v/include/ctpublic.h"
		then
			AC_MSG_RESULT(found Sybase in $d-$v)
			sybasedir="$d-$v"
			break
		fi
	done
done
if test x$sybasedir = x
then
	AC_MSG_WARN(Sybase backend not used)
else
	SYBASE_CFLAGS="-I${sybasedir}/include"
	SYBASE_LIBS="-lnsl -ldl -lm -L${sybasedir}/lib"
	AC_MSG_CHECKING(for Sybase host system type)
	AC_MSG_RESULT($host)
	case "$host" in
		*linux*) sybase_ctlibs="-lct -lcs -lsybtcl -lcomn -lintl"
			sybase_blklibs="-lblk ${sybase_ctlibs}"
			SYBASE_LIBS="${SYBASE_LIBS} ${sybase_ctlibs} ${sybase_blklibs}"
			AC_DEFINE(HAVE_SYBASE)
			;;
		*) AC_MSG_WARN(this host type is unsupported; sybase backend not used)
			sybasedir=""
			;;
	esac
fi
])

AM_CONDITIONAL(SYBASE, test x$sybasedir != x)

dnl Link gda-sybase-srv against debugable libs
AC_ARG_ENABLE(sybase-debug,
    [  --enable-sybase-debug=[no/min/max]      no=none, min=debug msgs, max=min and link against sybase devlibs (which are static!).],,enable_sybase_debug=no)
if test "x$sybasedir" != "x"
then
       AC_MSG_CHECKING(for Sybase debugging level)
       if test "x$enable_sybase_debug" = "xmax"
       then
               AC_DEFINE(SYBASE_DEBUG)
               if test -f $sybasedir/devlib/libct.a
               then
                       AC_MSG_RESULT(max)
                       AC_MSG_WARN(erase passwords in bug-buddy debug output before sending bugreports)
                       SYBASE_LIBS=${sybasedir}/devlib
               else
                       AC_MSG_RESULT(min)
                       AC_MSG_WARN(no debug libraries found, using --enable-sybase-debug=min)
                       enable_sybase_debug=min
               fi
       else
               AC_MSG_RESULT($enable_sybase_debug)
               if test "x$enable_sybase_debug" != "x"
               then
                       if test "x$enable_sybase_debug" != "xno"
                       then
                               AC_DEFINE(SYBASE_DEBUG)
                       fi
               fi
       fi
else
       if test "x$enable_sybase_debug" != "xno"
       then
               AC_MSG_WARN(you applied sybase debugging options, but sybase has not been found or is unsupported, disabling debug options)
       fi
       enable_sybase_debug=no
fi

dnl test for ORACLE
AC_ARG_WITH(oracle,
[  --with-oracle=<directory>	use ORACLE backend in <directoty>],[
if test $withval != yes
then
	dir=$withval
else
	dir="/usr/local"
fi
AC_MSG_CHECKING(for ORACLE installation)
for d in $dir $ORACLE_HOME /opt/oracle
do
	if test -f $d/lib/libclntsh.so
	then
		AC_MSG_RESULT(found ORACLE in $d)
		oracledir=$d
		break
	fi
done
if test x$oracledir = x
then
	AC_MSG_WARN(ORACLE backend not used)
else
	AC_DEFINE(HAVE_ORACLE)
	ORACLE_CFLAGS="-I${ORACLE_HOME}/rdbms/demo -I${ORACLE_HOME}/rdbms/public -I${ORACLE_HOME}/plsql/public -I${ORACLE_HOME}/network/public"
	ORACLE_LIBS="-L${ORACLE_HOME}/lib -lm -ldl -lserver8 -lclient8 \
		-lgeneric8 -lcommon8 -lvsn8 -lagent8 -lmm -lclntst8 \
            	-lslax8 -lsql8 -lcore8 -lnls8 -lplc8 -lplp8 -lpls8 \
               	-lpsa8"
fi
])

AM_CONDITIONAL(ORACLE, test x$oracledir != x)

dnl test for INTERBASE
AC_ARG_WITH(interbase,
[  --with-interbase=<directory>	use INTERBASE backend in <directoty>],[
if test $withval != yes
then
	dir=$withval
else
	dir="/usr/local"
fi
AC_MSG_CHECKING(for INTERBASE installation)
for d in $dir /usr/local/interbase /usr/local /usr /opt/interbase
do
	if test -f $d/include/ibase.h
	then
		AC_MSG_RESULT(found INTERBASE in $d)
		interbasedir=$d
		break
	fi
done
if test x$interbasedir = x
then
	AC_MSG_WARN(INTERBASE backend not used)
else
	AC_DEFINE(HAVE_INTERBASE)
	INTERBASE_CFLAGS="-I${interbasedir}/include"
	INTERBASE_LIBS="-L${interbasedir}/lib -lgds -ldl -lcrypt"
fi
])

AM_CONDITIONAL(INTERBASE, test x$interbasedir != x)

dnl Test for sqlite
AC_ARG_WITH(sqlite,
[  --with-sqlite=<directory>     use sqlite backend in <directory>],[
if test $withval != yes
then
        dir=$withval
else
        dir="/usr/local"
fi
AC_MSG_CHECKING(for sqlite files)
sqlitedir=""
for d in $dir /usr /opt/sqlite
do
        if test -f $d/include/sqlite.h
        then
                AC_MSG_RESULT(found sqlite in $d)
                sqlitedir=$d
                break
        fi
done
if test x$sqlitedir = x
then
        AC_MSG_WARN(sqlite backend not used)
else
	SQLITE_CFLAGS=-I${sqlitedir}/include
	SQLITE_LIBS="-L${sqlite}/lib -lsqlite"
	AC_DEFINE(HAVE_SQLITE)
fi
])

AM_CONDITIONAL(SQLITE, test x$sqlitedir != x)

dnl ******************************
dnl Variables
dnl ******************************
IDL_FLAGS=`gnome-config --cflags idl`

AC_SUBST(IDL_FLAGS)
AC_SUBST(ODBC_LIBS)
AC_SUBST(ODBC_CFLAGS)
AC_SUBST(MYSQL_LIBS)
AC_SUBST(MYSQL_CFLAGS)
AC_SUBST(POSTGRES_LIBS)
AC_SUBST(POSTGRES_CFLAGS)
AC_SUBST(PRIMEBASE_LIBS)
AC_SUBST(PRIMEBASE_CFLAGS)
AC_SUBST(TDS_LIBS)
AC_SUBST(TDS_CFLAGS)
AC_SUBST(SYBASE_LIBS)
AC_SUBST(SYBASE_CFLAGS)
AC_SUBST(LDAP_LIBS)
AC_SUBST(LDAP_CFLAGS)
AC_SUBST(ORACLE_LIBS)
AC_SUBST(ORACLE_CFLAGS)
AC_SUBST(INTERBASE_LIBS)
AC_SUBST(INTERBASE_CFLAGS)
AC_SUBST(MDB_LIBS)
AC_SUBST(MDB_CFLAGS)
AC_SUBST(CAMEL_LIBS)
AC_SUBST(CAMEL_CFLAGS)
AC_SUBST(XML_LIBS)
AC_SUBST(XML_CFLAGS)
AC_SUBST(SQLITE_LIBS)
AC_SUBST(SQLITE_CFLAGS)

AC_OUTPUT([
Makefile
libgda.spec
libgda.pc
po/Makefile.in
idl/Makefile
libgda/Makefile
providers/Makefile
providers/default/Makefile
providers/freetds/Makefile
providers/interbase/Makefile
providers/mysql/Makefile
providers/odbc/Makefile
providers/oracle/Makefile
providers/postgres/Makefile
providers/sqlite/Makefile
providers/sybase/Makefile
tools/Makefile
report/Makefile
report/gda-report.dtd
report/idl/Makefile
report/libgda-report/Makefile
testing/Makefile
doc/Makefile
doc/es/Makefile
doc/C/Makefile
doc/pt_BR/Makefile
data/Makefile
stamp.h
])
