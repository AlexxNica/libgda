<?xml version="1.0"?>
<unit>
  <test name="string17">
    <sql expected="D">update customers set salesrep.'id'=10</sql>
    <render_as>update customers set salesrep. 'id' =10</render_as>
  </test>

  <test name="string18">
    <sql expected="D">abcedf hdqsjh qkjhd qjkhdq ## /*type:"integer"*/</sql>
    <render_as>abcedf hdqsjh qkjhd qjkhdq ## /* type:"integer" */</render_as>
    <params>
      <param type="integer"/>
    </params>
  </test>

  <test name="string19">
    <sql expected="D">SELECT CASE p.proargtypes/[0] WHEN 'pg_catalog."any"'::pg_catalog.regtype</sql>
    <render_as>SELECT CASE p.proargtypes/[0] WHEN 'pg_catalog."any"' ::pg_catalog.regtype</render_as>
  </test>

  <test name="string20">
    <sql expected="D">SELECT CASE 'pg_catalog."any"'::pg_catalog.regtype</sql>
    <render_as>SELECT CASE 'pg_catalog."any"' ::pg_catalog.regtype</render_as>
  </test>

  <test name="string21">
    <sql expected="D">&amp; SELECT 1.2 /*type:'gfloat' name:p1*/ , ## /*type:'int4'*/;</sql>
    <render_as when_gda="FALSE">&amp; SELECT 1.2 /* type:"gfloat" name:"p1" */ , ## /* type:"int4" */</render_as>
    <render_as when_gda="TRUE">&amp; SELECT 1.200000 /* type:"gfloat" name:"p1" */ , ## /* type:"int4" */</render_as>
    <params>
      <param name="p1" type="gfloat" default="1.2"/>
      <param type="int4"/>
    </params>
  </test>

  <test name="string22">
    <sql expected="D">SELECT OBJECT_NAME, NULL, NULL, NULL, NULL, NULL, NULL, NULL FROM USER_OBJECTS WHERE OBJECT_TYPE=:OBJ_TYPE</sql>
    <render_as>SELECT "OBJECT_NAME", NULL, NULL, NULL, NULL, NULL, NULL, NULL FROM USER_OBJECTS AS t1 WHERE "OBJECT_TYPE"=:OBJ_TYPE</render_as>
  </test>

  <test name="test_pg">
    <sql expected="D">SELECT p.proname, p.oid, u.usename, pg_catalog.obj_description(p.oid),typo.typname,CASE p.proargtypes[0] WHEN 'pg_catalog."any"'::pg_catalog.regtype THEN CAST('-' AS pg_catalog.text) ELSE typi.typname END,NULL FROM pg_catalog.pg_proc p, pg_catalog.pg_user u, pg_catalog.pg_namespace n, pg_catalog.pg_type typi, pg_catalog.pg_type typo WHERE u.usesysid=p.proowner AND n.oid = p.pronamespace AND p.prorettype = typo.oid AND (typo.oid NOT IN (22, 24, 27, 28, 29, 30, 210, 705, 1790, 2202, 2203, 2204, 2205, 2206, 2249, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283) OR typo.oid='2276') AND p.proargtypes[0] = typi.oid AND (typi.oid NOT IN (22, 24, 27, 28, 29, 30, 210, 705, 1790, 2202, 2203, 2204, 2205, 2206, 2249, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283) OR typi.oid='2276') AND p.proisagg AND pg_catalog.pg_function_is_visible(p.oid) ORDER BY 2</sql>
    <render_as>SELECT p.proname, p.oid, u.usename, pg_catalog.obj_description(p.oid),typo.typname,CASE p.proargtypes[0] WHEN 'pg_catalog."any"' ::pg_catalog.regtype THEN CAST( '-' AS pg_catalog.text) ELSE typi.typname END,NULL FROM pg_catalog.pg_proc p, pg_catalog.pg_user u, pg_catalog.pg_namespace n, pg_catalog.pg_type typi, pg_catalog.pg_type typo WHERE u.usesysid=p.proowner AND n.oid = p.pronamespace AND p.prorettype = typo.oid AND (typo.oid NOT IN (22, 24, 27, 28, 29, 30, 210, 705, 1790, 2202, 2203, 2204, 2205, 2206, 2249, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283) OR typo.oid= '2276' ) AND p.proargtypes[0] = typi.oid AND (typi.oid NOT IN (22, 24, 27, 28, 29, 30, 210, 705, 1790, 2202, 2203, 2204, 2205, 2206, 2249, 2275, 2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283) OR typi.oid= '2276' ) AND p.proisagg AND pg_catalog.pg_function_is_visible(p.oid) ORDER BY 2</render_as>
  </test>  

  <test name="string23">
    <sql expected="D">SELECT schema.table.field || ##/*name:"Postfix" type:"varchar"*/</sql>
    <render_as when_gda="FALSE">SELECT schema.table.field || ## /* name:"Postfix" type:"varchar" */</render_as>
    <render_as when_gda="TRUE">SELECT schema.table.field || ## /* type:"varchar" name:"Postfix" */</render_as>
    <params>
      <param name="Postfix" type="varchar"/>
    </params>
  </test>

  <test name="string24">
    <sql expected="D">SELECT schema.table.field || ##/*name:'Postfix' type:'varchar'*/</sql>
    <render_as when_gda="FALSE">SELECT schema.table.field || ## /* name:"Postfix" type:"varchar" */</render_as>
    <render_as when_gda="TRUE">SELECT schema.table.field || ## /* type:"varchar" name:"Postfix" */</render_as>
    <params>
      <param name="Postfix" type="varchar"/>
    </params>
  </test>

</unit>
