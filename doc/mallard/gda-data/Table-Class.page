<page xmlns="http://projectmallard.org/1.0/"
	 type="topic" id="table-class">

  <info>
    <revision pkgversion="5.2" version="0.1" date="2012-03-28" status="incomplete" />
    <credit type="author">
      <name>Daniel Espinosa</name>
      <email>despinosa@src.gnome.org</email>
    </credit>
    <license>
      <p>Creative Commons Share Alike 3.0</p>
    </license>
    <link type="topic" xref="classes" />
  </info>

  <title>
    Table class
  </title>
  <p>
  <code>Table</code> class is an implementation of <code>DbTable</code> interface. It uses GDA to get access to a database's table description.
  </p>
  <p>
  In order to load data, you need to set a <code>Gda.Connection</code> and a table's name. Then <code>update()</code> method will introspect table information using GDA's MetaStore object and executing SELECT commands to retrive meta data to strore store it, you don't need to call update() again unless your table definition has changed.
  </p>
  <section id="table-uml">
  <title>Table class UML definition</title>
  <figure>
  <title>UML definition</title>
  <desc>This diagram describes Table class and its implementations.</desc>
  <media type="image" mime="image/png" src="table-class-uml.png"/>
</figure>
  </section>
  <section id="table-update">
  <title>Using a Table class to access a table meta data</title>
  <listing>
  <desc>
  This codes initiate a Table class, set a name and a connection in order to call update()
  </desc>
  <code mime="text/x-c++src">
  var t = new Table ();
  t.name = "customer";
  t.connection = connection;
  t.update ();
  </code>
  </listing>
  <p>In the above code, connection is opened before to be set to <code>Table.connection</code> property. You need to set <code>Table.name</code> property. Internally <code>Gda.Connection.update_meta_store()</code> is called, this could take some time, then executes some SELECT commands to introspect table, columns description are stored in <code>DbFiledInfo</code> objects.
  </p>
  </section>
  <section id="table-append">
  <title>Using a Table class to add a new table</title>
  <listing>
  <desc>This setup a table to be added to a database's table</desc>
  <code mime="text/x-c++src">
  var t = new Table ();
  t.name = "created_table";
  t.connection = connection;
  var field = new FieldInfo ();
  // Setup column id
  field.name = "id";
  field.value_type = typeof (int);
  field.attributes = DbFieldInfo.Attribute.PRIMARY_KEY | 
                     DbFieldInfo.Attribute.AUTO_INCREMENT;
  t.set_field (field);
  
  // Setup column name
  var field1 = new FieldInfo ();
  field1.name = "name";
  field1.value_type = typeof (string);
  field1.attributes = DbFieldInfo.Attribute.NONE;
  t.set_field (field1);
  
  // Setup column company
  var field2 = new FieldInfo ();
  field2.name = "company";
  field2.value_type = typeof (int);
  field2.default_value = 1;
  
  // Setup column's foreign key
  var fk = new DbFieldInfo.ForeignKey ();
  var rt = new Table ();
  rt.name = "company";
  fk.reftable = rt;
  fk.refcol.add ("id");
  fk.update_rule = DbFieldInfo.ForeignKey.Rule.CASCADE;
  fk.delete_rule = DbFieldInfo.ForeignKey.Rule.SET_DEFAULT;
  field2.fkey = fk;
  t.set_field (field2);
  
  // Append new table
  t.append ();
  </code>
  </listing>
  <p>
  In the above code a new table will be added. Create a new <code>Table</code> object, set its name and connection, use <code>Table.set_field()</code> to set column definitions. You must create <code>DbFieldInfo</code> objects, setting its name, type and attributes is enough to be set in a table. If your column must be a PRIMARY KEY you must set <code>DbFieldInfo.attributes</code> to <code>DbFieldInfo.Attribute.PRIMARY_KEY</code>; if it is autoincrement key you must use <code>|</code> operator to add a <code>DbFieldInfo.Attribute.AUTO_INCREMENT</code> attribute.
  </p>
  <p>
  If the column will refer to a column in other table as a foreign key you must set <code>DbFieldInfo.fkey</code>. ForeignKey object is used for column's foreign keys.
  </p>
  </section>
  <section id="table-fields">
  <title>Iterating through Fields definitions</title>
  <p>
  You can iterate over <code>Table</code>'s fields descriptions using Vala <code>foreach</code> statement, by using <code>Record.fields</code> property; it's a <code>Gee.Collection</code> of <code>DbFieldInfo</code> objects, then you can use:
  </p>
    <code mime="text/x-c++src">
  foreach (DbFieldInfo f in table.fields) {
    /* work with DbField object */
  }
  </code>
  <p>
  The same apply for all keys you set by using <code>Table.primary_keys</code> property.
  </p>
  </section>
  <section>
  <title>Access rows in a table</title>
  <p>
  All rows in a table can be accessed using <code>Table.records</code> property, as a <code>Gee.Collection</code> of <code>DbRecord</code> objects. Internally, when this property is accessed a "SELECT * FROM table" SQL command is executed, you can filter them using <code>Gee.Traversable.filter()</code> function.
  </p>
  <note style="tip">
  <p>
  <code>Table.records</code> is a <code>RecordCollection</code> object that implements <code>DbRecordCollection</code> and its pre-requisites: <code>Gee.Collection</code>, <code>Gee.Traversable</code> and <code>Gee.Iterable</code>
  </p>
  </note>
  <note style="tip">
  <p>
  Future implementations will include a way to create powerful filter to be used when SQL command is executed to avoid load all rows and iterate all over them when using <code>Gee.Traversable.filter()</code>.
  </p>
  </note>
  </section>
  <section id="table-dependencies">
  <title>Table's dependencies</title>
  <section id="table-dependencies-depends">
  <title>ForeignKeys</title>
  <p>
  When you call <code>Table.update()</code>, you can access to all <code>DbTable</code> objects referenced in foreign keys for each column in the table definition, using <code>Table.depends</code>, through a <code>Gee.Collection</code> of <code>DbTable</code> objects.
  </p>
  </section>
  <section id="table-dependencies-referenced">
  <title>Tables referencing your table</title>
  <p>
  Using <code>Table.referenced</code> property, you can access to a <code>Gee.Collection</code> of <code>DbTable</code> objects that depends on your table.
  </p>
  </section>
  </section>
</page>
