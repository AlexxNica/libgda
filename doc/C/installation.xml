<chapter id="installation">
  <title>Installation</title>
  <sect1 id="installation-introduction">
    <title>Getting the library</title>
    <para>
      The &LIBGDA; library is bundled with some Linux distributions, so for these distributions, installing
      can be done using the distribution speficic tools.
    </para>
    <para>
      Also &LIBGDA;'s sources are available for download from the 
      <ulink url="http://ftp.gnome.org/pub/GNOME/sources/libgda/">GNOME ftp servers</ulink>, and from
      the GNOME SVN repositories; see the <ulink url="http://www.gnome-db.org">Gnome-DB web site</ulink> for
      more information.
    </para>
  </sect1>
  <sect1 id="installation-installing">
    <title>Installing from the sources</title>
    <para>
      If you downloaded the source code (in a tarball), you must
      compile the software. To do so, once you have unpacked
      the source tree, you must:
      <programlisting>
<prompt>$</prompt>/configure
<prompt>$</prompt>make
<prompt>$</prompt>make install
      </programlisting>
    </para>
    <para>
      This will generate the makefiles for your specific platform,
      compile all the source tree, and install the binaries and
      documentation in your system.
    </para>
    <para>
      If you don't find a file named <filename>configure</filename>, there
      should be one called <filename>autogen.sh</filename>. In this case,
      run <filename>autogen.sh</filename>, which will create and run the
      generated <filename>configure</filename> file.
    </para>
    <para>
      You can specify several arguments to <filename>configure</filename> (or
      <filename>autogen.sh</filename>). The most significant are (you can
      check all the available arguments by running
      <command>configure --help</command>):
    </para>
    <itemizedlist mark="bullet">
      <listitem>
        <para>
          <userinput>--prefix=&lt;directory&gt;</userinput>: Prefix where
          package will be installed
        </para>
      </listitem>
      <listitem>
        <para>
          <userinput>--enable-gtk-doc</userinput>: Specify that the library's documentation
	  must be built (using the gtk-doc program)
        </para>
      </listitem>
      <listitem>
        <para>
          <userinput>--enable-debug</userinput>: Specify to explicietly print some debuging
          information
        </para>
      </listitem>
      <listitem>
        <para>
          <userinput>--with-mysql=&lt;directory&gt;</userinput>: Specify
          directory where &MYSQL; libraries are installed
        </para>
      </listitem>
      <listitem>
        <para>
          <userinput>--with-postgres=&lt;directory&gt;</userinput>:
          Specify directory where &PGSQL; libraries are installed
        </para>
      </listitem>
      <listitem>
        <para>
          <userinput>--with-sybase=&lt;directory&gt;</userinput>: Specify
          directory where &SYBASE; libraries are installed
        </para>
      </listitem>
      <listitem>
        <para>
          <userinput>--with-ldap=&lt;directory&gt;</userinput>: Specify
          directory where &LDAP; libraries are installed
        </para>
      </listitem>
      <listitem>
        <para>
          <userinput>--with-oracle=&lt;directory&gt;</userinput>: Specify
          directory where &ORAC; libraries are installed
        </para>
      </listitem>
      <listitem>
        <para>
          <userinput>--with-interbase=&lt;directory&gt;</userinput>: Specify
          directory where &INTERB; libraries are installed
        </para>
      </listitem>
      <listitem>
        <para>
          <userinput>--with-mdb=&lt;directory&gt;</userinput>: Specify
          directory where the MDB libraries (for accessing &MSACC; files)
          are installed
        </para>
      </listitem>
    </itemizedlist>
    <para>
      Libraries needed by providers are searched by default, so, if found, providers are
      compiled by default. Those libraries are searched in hard-coded directories, so
      if the installation of these libraries is in an uncommon place, the above arguments
      should be used to specify the directories where the libraries and header files
      are installed. Note that the SQLite provider is now always built using the sources
      of the SQLite library that are bundled within &LIBGDA;'s sources.
    </para>
    <para>
      If you find any problem during the configuration, compilation or
      installation process, do not hesitate in contacting the
      &GNOMEDB; mailing list (<email>gnome-db-list@gnome.org</email>, first
      send an email to <email>gnome-db-list-request@gnome.org</email> with 
      the subject SUBSCRIBE, if you are not already subscribed).
    </para>
  </sect1>
  <sect1 id="compiling">
    <title>Compiling with the library</title>
    <para>
      To compile you will need to set the C flags and to link the library, so we recommend
      to use the <command>pkg-config</command> command.
    </para>
    <programlisting>
<systemitem class="prompt">$</systemitem>gcc -c full_example.c `pkg-config --cflags libgda-3.0`
<systemitem class="prompt">$</systemitem>gcc -o full_example `pkg-config --libs libgda-3.0` full_example.o
    </programlisting>
    <para>
      Doing this will add to the C compiler command line all needed header files
      and library directories as well as all needed libraries for linking your GDA
      application. To include header files, you can just use <filename>libgda/libgda.h</filename>,
      which will include all GDA header files.
    </para>
  </sect1>
  <sect1 id="installation-configuring">
    <title>Configuring</title>
    <para>
      Depending on the use you're going to get out of &LIBGDA;, you may have
      to dig deep into its internals, but don't be afraid, things have been
      implemented to be easy to use.
    </para>
    <sect2 id="installation-development">
      <title>Configuration for development</title>
      <para>
        If you want to develop applications using &LIBGDA;, you should 
        install the libgda-dev[el] package if you do a &RPM; or <link
								   linkend="installation-debian">Debian-based</link>
        installation. If you compiled the source code, development files are
        installed in your system.
      </para>
      <para>
        The only step you need to do to make sure everything is well 
        installed, is to check that &LIBGDA; libraries and binaries are seen
        by your system. That is, make sure that the &LIBGDA; 
        <filename class="directory">bin/</filename> directory is in your
        <envar>PATH</envar> environment variable, as well as the
        <filename class="directory">lib/</filename> in your 
        <envar>LD_LIBRARY_PATH</envar> (or 
        <filename>/etc/ld.so.conf</filename> file).
      </para>
      <para>
        Programs which need to use &LIBGDA;'s features need to include a headers file, which is:
      </para>
      <programlisting>
#include &lt;libgda/libgda.h&gt;
      </programlisting>
      and to use reports:
      <programlisting>
#include &lt;libgda/libgda.h&gt;
#include &lt;libgda-report/libgda-report.h&gt;
      </programlisting>
      and to use virtual connections:
      <programlisting>
#include &lt;libgda/libgda.h&gt;
#include &lt;virtual/libgda-virtual.h&gt;
      </programlisting>
    </sect2>


    <sect2 id="installation-client">
      <title>Configuration for accessing a database</title>
      <para>
	To access a database, it must have a database provider (if &LIBGDA; does not
	support the type of database to access, make a bug report in 
	<ulink url="http://bugzilla.gnome.org/">bugzilla</ulink>), and that database provider
	must be compiled an installed: the <command>gda-list-config-3.0</command> or 
	<command>gda-sql-3.0 -L</command> commands will
	show a list of the installed and configured database providers.
      </para>
      <para>
	Any connection to a database can be done either using a pre-defined data source, or using a
	connection string: using a data source (DSN) allows one to <emphasis>name</emphasis> connections
	and define them once, whereas using connection strings allows programs to be more
	independant of any &LIBGDA; configuration. Anyway, defining a DSN involves defining the same
	parameters as for a connection string.
      </para>
      <para>
	A connection string is a semi-colon delimited list of named parameters 
	(as <![CDATA[<param1_name>=<param1_value>;<param2_name>=<param2_value>...]]>), the parameters
	being specific to each database provider (the two commands mentionned above also list all the
	parameters for each provider).
      </para>
      <para>
	DSNs can be configured on a per-user basis or on a system-wide basis. Each user's
	own DSN definitions are stored in the <filename>$HOME/.libgda/config</filename> file (which
	is created the first time &LIBGDA; is used within an application. System wide DSN are defined in the
	<filename>&lt;prefix&gt;/etc/libgda/config</filename>. Rather than editing that
	file manually, it is possible to use the <command>gnome-database-properties-3.0</command>
	from the <ulink url="http://www.gnome-db.org">Libgnomedb</ulink> library.
      </para>
    </sect2>

    <sect2 id="installation-provider">
      <title>Provider's specific information</title>
      <para>
        This section provides information specific to each of the available
        &LIBGDA; providers.
      </para>
      <sect3 id="installation-provider-default">
	<title>Default provider</title>
	<para>
	  The &GDA; default provider (based on an SQLite database file) is always installed 
          with &LIBGDA;, which means that a default database system is always available. 
	  Specifically the first time you use
	  &LIBGDA;, a test database is copied into <filename>$HOME/.libgda</filename> and
	  named "SalesTest". 
	</para>
      </sect3>
      <sect3 id="installation-provider-odbc">
	<title>&ODBC; Provider</title>
	<para>
	  The &ODBC; provider is a special case, since &ODBC; is itself a 
          data access layer, the same as &LIBGDA;. So, in the case of the
          &GDA; &ODBC; provider, the &DSN; string is completely up to the
          &ODBC; driver manager. That is, the &GDA; &ODBC; provider does not
          parse it all, nor does it try to understand what it means; it
          simply passes it over to the &ODBC; library.
	</para>
	<para>
	  So, if you want to use &LIBGDA; with &ODBC;, you should first know
          how to set up an &ODBC; data source, and then just specify the
          &DSN; string you would pass to the &ODBC; library in the &DSN;
          string of the &GDA; data sources.
	</para>
	<para>
	  There is a project called
	  <ulink url="http://www.unixodbc.org">unixODBC</ulink>,
          which provides some graphical tools to help you in
	  setting up &ODBC; data sources. You may find it
	  interesting to give it a try.
	</para>
      </sect3>
      <sect3 id="installation-provider-all">
	<title>Common to all provider</title>
	<para>
	  Each provider exports a list of the arguments it requires in 
	  its connection string which is used internally by &LIBGDA; to
	  establish each connection. If you don't use a GUI which proposes
	  you valid choices (such as &GNOMEDB;), you can get that list in
	  each file named <filename>&lt;provider_name&gt;_specs_dsn.xml</filename>
	  installed in the <filename>$PREFIX/share/libgda</filename> directory.
	  This file is easy to parse and read.
	</para>
      </sect3>
    </sect2>
  </sect1>
</chapter>
