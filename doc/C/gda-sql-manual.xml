<para>
  The &LIBGDA;'s console tool allow one to send SQL commands to a database server, and
  to easily browse the meta data associated to the database (ie. get information about
  tables and their columns, functions, triggers, etc). This tool has a usage similar to
  PostgreSQL's <application>psql</application>, MySQL's <application>mysql</application>, Oracle's
  <application>sqlplus</application> or SQLite's <application>sqlite3</application> programs.
</para>

<para>
  However, contrary to the programmed mentionned above, The &LIBGDA;'s console tool
  offers the same features and usage for any of the databases supported by &LIBGDA;.
</para>


<chapter id="gda-sql-manual-run">
  <title>Getting started</title>

  <sect1>
    <title>Features</title>
    <para>
      The &LIBGDA;'s console tool' main features are:
      <itemizedlist>
	<listitem><para>Can handle more than one connection at the same time</para></listitem>
	<listitem><para>Reports meta data in a similar way, whatever the real type of database
	    accessed</para></listitem>
	<listitem><para>Can create <emphasis>virtual</emphasis> connections binding 
	    several already opened connections (to run SQL commands across multiple 
	    connections)</para></listitem>
	<listitem><para>Allows one to define variables which can be referenced in any
	    SQL statement (using a common syntax)</para></listitem>
	<listitem><para>Has one query buffer per connection to edit complex queries (uses a
	    parametrable external editor)</para></listitem>
	<listitem><para>Easy command line editing and output using the Readline library and a
	    (parametrable) pager</para></listitem>
	<listitem><para>Works on any platform on which &LIBGDA; has been ported to.</para></listitem>
      </itemizedlist>
    </para>
  </sect1>

  <sect1>
    <title>Execution</title>
    <para>
      The &LIBGDA;'s SQL console tool runs is a terminal emulator, and can be launched using
      the <command>gda-sql-4.0</command>:
      <cmdsynopsis>
	<command>gda-sql-4.0</command>
	<arg>--help</arg>
	<arg>-l</arg>
	<arg>-L</arg>
	<arg>-C <replaceable>command</replaceable></arg>
	<arg>-f <replaceable>commands file</replaceable></arg>
	<arg>-o <replaceable>output file</replaceable></arg>
	<arg>-p</arg>
	<arg rep="repeat"><replaceable>connection specification</replaceable></arg>
      </cmdsynopsis>
      The options are the following ones:
      <itemizedlist>
	<listitem><para>the <option>--help</option> option gives a short help summary</para></listitem>
	<listitem><para>the <option>-l</option> and <option>-L</option> options respectively
	output a list of the defined data sources (DSN) and of the installed database adaptaters
	(database providers):
	    <programlisting>
[prompt]> gda-sql-4.0 -l
List of defined data sources
DSN       | Provider | Description                          | Connection string     | Username | Global
----------+----------+--------------------------------------+-----------------------+----------+-------
SalesTest | SQLite   | Test database for a sales department | DB_NAME=sales_test.db |          | FALSE 
(1 row)
	    </programlisting>
	    <programlisting>
[prompt]> gda-sql-4.0 -L
                                                        List of installed providers
Provider    | Description                         | DSN parameters     | Authentication | File 
                                     
------------+-------------------------------------+--------------------+----------------+----------------------
-------------------------------------
PostgreSQL  | Provider for PostgreSQL databases   | DB_NAME,           | USERNAME,      | [...]libgda-postgres.so
                                                    SEARCHPATH,          PASSWORD               
                                                    HOST,                
                                                    PORT,                    
                                                    OPTIONS,                             
                                                    USE_SSL          
MSAccess    | Provider for Microsoft Access files | DB_NAME,           |                | [...]libgda-mdb.so     
                                                    DB_DIR 
[...]            
	    </programlisting>
	</para></listitem>
	<listitem><para>the <option>-C</option> and <option>-f</option> options repectively allow
	    one to specify a single command to be run or a filename containing the commands to run
	    before the tool exits</para></listitem>
	<listitem><para>the <option>-o</option> option allows to specify a file to write the 
	    output to</para></listitem>
	<listitem><para>the <option>-p</option> speficies that the tool should not ask for
	    passwords when a username has been specified for a connection but no password has
	    been specified.</para></listitem>
      </itemizedlist>
    </para>
    <para>
      Connections to be opened can be specified on the command line using either:
      <itemizedlist>
	<listitem><para>defined data sources (the ones listed using the <option>-l</option> option)</para></listitem>
	<listitem><para>connection strings which have the following format: 
	    "[&lt;provider&gt;://][&lt;username&gt;[:&lt;password&gt;]@]&lt;connection_params&gt;". 
	    Note that if provided, &lt;username&gt;, &lt;password&gt; and &lt;provider&gt; must be encoded as per RFC 1738</para></listitem>
	<listitem><para>for SQLite and MS Access files: the file name</para></listitem>
      </itemizedlist>
    </para>
    <para>
      Connections can also be opened while the tool is running using the <command>.c</command> 
      internal command.
    </para>
    <para>
      Examples:
      <programlisting>
[prompt]> gda-sql-4.0 Sales
[prompt]> gda-sql-4.0 Postgresql://username@DB_NAME=mydb SQLite://DB_NAME=fspot Sales
[prompt]> gda-sql-4.0 path/to/dbfile.db
      </programlisting>
    </para>
  </sect1>

</chapter>

<chapter id="gda-sql-manual-open">
  <title>Connections management</title>
  <para>
    The console tool is able to handle several connections at the same time, they can dynamically be opened and
    closed during a session. The current connection in use is indicated by the prompt.
    Use the <command>.c</command> command to open a connection with the connection name (the name by which
    the connection is identified within the tool) and a connection string; for example:
    <programlisting>
gda> .c cnc1 SalesTest
cnc1>
    </programlisting>
  </para>
  <para>
    The list of connection can be listed using the same <command>.c</command> command without any argument, for example:
    <programlisting>
ia32> .c
          List of opened connections
Name | Provider | DSN or connection string | Username
-----+----------+--------------------------+---------
cnc1 | SQLite   | SalesTest                |         
ia32 | SQLite   | IA32Instructions         |         
(2 rows)

ia32>
    </programlisting>
  </para>
  <para>
    To switch from one connection to the other, use the <command>.c</command> command with the connection name to use
    as single argument, for example to switch from using the "ia32" to the "cnc1" connection: 
    <programlisting>
ia32> .c cnc1
cnc1>
    </programlisting>
  </para>

  <sect1>
    <title>Meta data</title>
    <para>
      When a connection is opened for the first time, the tool get all the possible meta data associated to that connection (list of
      tables, table's columns and their constraints, views, etc). The meta data are refered to when the user wants for example
      to list a table's attributes, or for command line completion.
    </para>
    <para>
      If some modifications to the database structure have been made (either from the SQL console or from another tool), then
      the meta data must be updated using the <command>.meta</command> command, which does not output anything unless an error
      occurred.
    </para>
    <para>
      As the meta data are also stored in a database, the console tool allows one to directly execute SQL commands in the
      meta data database associated to a connection. The meta data connection associated to a connection is by convention named
      as the tilde character concatenated with the connection name (for example if the connection is named "cnc1", then the connection
      to its meta data will be named "~cnc1"). To open a meta data connection, make sure the current connection is the one for which
      you want to access the meta data, and then use the <command>.c ~</command> command:
      <programlisting>
cnc1> .c ~
Getting database schema information, this may take some time... Done.
~cnc1> .dt
                           List of tables
Schema | Name                             | Type       | Owner | Description
-------+----------------------------------+------------+-------+------------
main   | _attributes                      | BASE TABLE |       |            
main   | _builtin_data_types              | BASE TABLE |       |            
main   | _character_sets                  | BASE TABLE |       |            
main   | _check_column_usage              | BASE TABLE |       |            
main   | _collations                      | BASE TABLE |       |            
main   | _columns                         | BASE TABLE |       |            
main   | _domain_constraints              | BASE TABLE |       |            
main   | _domains                         | BASE TABLE |       |            
main   | _element_types                   | BASE TABLE |       |            
main   | _enums                           | BASE TABLE |       |            
main   | _information_schema_catalog_name | BASE TABLE |       |            
main   | _key_column_usage                | BASE TABLE |       |            
main   | _parameters                      | BASE TABLE |       |            
main   | _referential_constraints         | BASE TABLE |       |            
main   | _routine_columns                 | BASE TABLE |       |            
main   | _routines                        | BASE TABLE |       |            
main   | _schemata                        | BASE TABLE |       |            
main   | _table_constraints               | BASE TABLE |       |            
main   | _tables                          | BASE TABLE |       |            
main   | _triggers                        | BASE TABLE |       |            
main   | _udt                             | BASE TABLE |       |            
main   | _udt_columns                     | BASE TABLE |       |            
main   | _view_column_usage               | BASE TABLE |       |            
main   | _views                           | BASE TABLE |       |            
main   | gda_sql_query_buffers            | BASE TABLE |       |            
(25 rows)

~cnc1> SELECT table_name FROM _tables;
table_name     
---------------
customers      
locations      
orders         
order_contents 
roles          
salesrep       
sales_orga     
warehouses     
categories     
products       
products_copied
(11 rows)

~cnc1>
      </programlisting>
    </para>
    
    <sect2>
      <title>Information about tables</title>
      <para>
	Use the <command>.dt</command> command to list all the tables (or list only one table if the table name is specified as
	an argument to the command):
	<programlisting>
cnc1> .dt
                  List of tables
Schema | Name            | Type       | Owner | Description
-------+-----------------+------------+-------+------------
main   | categories      | BASE TABLE |       |            
main   | customers       | BASE TABLE |       |            
main   | locations       | BASE TABLE |       |            
main   | order_contents  | BASE TABLE |       |            
main   | orders          | BASE TABLE |       |            
main   | products        | BASE TABLE |       |            
main   | products_copied | BASE TABLE |       |            
main   | roles           | BASE TABLE |       |            
main   | sales_orga      | BASE TABLE |       |            
main   | salesrep        | BASE TABLE |       |            
main   | warehouses      | BASE TABLE |       |            
(11 rows)

cnc1> .dt customers
               List of tables
Schema | Name      | Type       | Owner | Description
-------+-----------+------------+-------+------------
main   | customers | BASE TABLE |       |            
(1 row)

cnc1>
	</programlisting>
      </para>
      <para>
	To display the details about a single table, use the <command>.d &lt;table_name&gt;</command> command:
	<programlisting>
cnc1> .d customers
          List of columns for table 'customers'
Column            | Type    | Nullable | Default | Extra         
------------------+---------+----------+---------+---------------
id                | integer | no       |         | Auto increment
name              | string  | no       | ''      |               
default_served_by | integer | yes      |         |               
country           | string  | yes      |         |               
city              | string  | yes      |         |               
(5 rows)

Primary key 'primary_key' (id)
Foreign key 'fk_locations' (country, city) references  main.locations (country, city)
Foreign key 'fk_salesrep' (default_served_by) references  main.salesrep (default_served_by)
cnc1>
	</programlisting>
      </para>

      <para>
	Finally, the <command>.graph [TABLE1 [TABLE2...]]</command> will create a graph of all the tables (or
	only the tables mentionned as arguments). The graph creates a <application>GraphViz</application> file
	named "graph.dot" which can then be processed with the GraphViz'<command>dot</command> command to
	produce an image or a PDF file for example.
      </para>
      <para>
	If the <envar>GDA_SQL_VIEWER_PNG</envar> or <envar>GDA_SQL_VIEWER_PDF</envar> environment variables are set
	(for example to <application>eog</application> or <application>evince</application>) and if the <command>dot</command> command
	is installed, then the console tool will perform the transformation and display the graph (if under a graphical session).
	The following figure shows an example of graph:
	<mediaobject>
          <imageobject role="html">
            <imagedata fileref="gda-sql-graph.png" format="PNG" contentwidth="140mm"/>
          </imageobject>
          <textobject>
            <phrase>Sample output from the ".graph" command</phrase>
          </textobject>
	</mediaobject>
      </para>
    </sect2>

    <sect2>
      <title>Information about views</title>
      <para>
      </para>
    </sect2>

    <sect2>
      <title>Information about other objects</title>
      <para>
      </para>
    </sect2>
  </sect1>

</chapter>

<chapter id="gda-sql-manual-commands">
  <title>Executing commands</title>
  <para>
    Blah.
  </para>

  <sect1>
    <title>SQL comands</title>
  </sect1>

  <sect1>
    <title>Internal commands</title>
  </sect1>

</chapter>


