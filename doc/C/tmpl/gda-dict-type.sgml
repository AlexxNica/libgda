<!-- ##### SECTION Title ##### -->
GdaDictType

<!-- ##### SECTION Short_Description ##### -->
Represents a data type in the DBMS

<!-- ##### SECTION Long_Description ##### -->
<para>
DBMS systems usually have quite large set of data types (which can sometimes be expanded by
users). Each #GdaDictType object represents one data type. The libgda library provides some
data types, and so it is possible, for each #GdaDictType object, to get the corresponding
libgda data type.
</para>
<para>
Every data type can be represented by a #GdaDictType (even user defined data types).
Complex data types (data types described as the aggregation of several other data types, like C structures)
are handled like any other data type and it is not possible to individually access the different components of the complex
data type (it is, however, possible to write a plugin for this data type).
</para>
<para>
It implements the #GdaXmlStorage interface.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT GdaDictType ##### -->
<para>

</para>


<!-- ##### FUNCTION gda_dict_type_new ##### -->
<para>

</para>

@dict: 
@Returns: 


<!-- ##### FUNCTION gda_dict_type_set_sqlname ##### -->
<para>

</para>

@dt: 
@sqlname: 


<!-- ##### FUNCTION gda_dict_type_get_sqlname ##### -->
<para>

</para>

@dt: 
@Returns: 


<!-- ##### FUNCTION gda_dict_type_set_g_type ##### -->
<para>

</para>

@dt: 
@g_type: 


<!-- ##### FUNCTION gda_dict_type_get_g_type ##### -->
<para>

</para>

@dt: 
@Returns: 


<!-- ##### FUNCTION gda_dict_type_add_synonym ##### -->
<para>

</para>

@dt: 
@synonym: 


<!-- ##### FUNCTION gda_dict_type_get_synonyms ##### -->
<para>

</para>

@dt: 
@Returns: 


<!-- ##### FUNCTION gda_dict_type_clear_synonyms ##### -->
<para>

</para>

@dt: 


