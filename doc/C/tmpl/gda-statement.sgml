<!-- ##### SECTION Title ##### -->
GdaStatement

<!-- ##### SECTION Short_Description ##### -->
Single SQL statement

<!-- ##### SECTION Long_Description ##### -->
<para>
  The #GdaStatement represents a single SQL statement (multiple statements can be grouped in a #GdaBatch object).
</para>
<para>
  A #GdaStatement can either be built "manually" by building a #GdaSqlStatement structure, or from an SQL statement using
  a #GdaSqlParser object.
</para>
<para>
  A #GdaConnection can use a #GdaStatement to:
  <itemizedlist>
    <listitem><para>prepare it for a future execution, the preparation step involves converting the #GdaStatement
	object into a structure used by the database's own API, see gda_connection_statement_prepare()</para></listitem>
    <listitem><para>execute it using gda_connection_statement_execute_select() if it is known that the statement is a
	selection statement, gda_connection_statement_execute_non_select() if it is not a selection statement, or
	gda_connection_statement_execute() when the type of expected result is unknown.</para></listitem>
  </itemizedlist>
  Note that it is possible to use the same #GdaStatement object at the same time with several #GdaConnection objects.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
#GdaBatch
</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT GdaStatement ##### -->
<para>

</para>


<!-- ##### SIGNAL GdaStatement::checked ##### -->
<para>

</para>

@gdastatement: the object which received the signal.
@arg1: 
@arg2: 

<!-- ##### SIGNAL GdaStatement::reset ##### -->
<para>
This signal is emitted whenever the internal #GdaSqlStatement structure has changed
</para>

@gdastatement: the object which received the signal.

<!-- ##### ARG GdaStatement:structure ##### -->
<para>
This property changes or queries the internal #GdaSqlStatement structure. A copy is made when either setting or getting that property.
</para>

<!-- ##### ENUM GdaStatementSqlFlag ##### -->
<para>
  Specifies how the general rendering is done
</para>

@GDA_STATEMENT_SQL_PRETTY: rendering will include newlines and indentation to make it easy to read
@GDA_STATEMENT_SQL_PARAMS_LONG: parameters will be rendered using the "/* name:&lt;param_name&gt; ... */" syntax
@GDA_STATEMENT_SQL_PARAMS_SHORT: parameters will be rendered using the "##&lt;param_name&gt;..." syntax
@GDA_STATEMENT_SQL_PARAMS_AS_COLON: parameters will be rendered using the ":&lt;param_name&gt;" syntax
@GDA_STATEMENT_SQL_PARAMS_AS_DOLLAR: parameters will be rendered using the "$&lt;param_number&gt;" syntax where parameters are numbered starting from 1
@GDA_STATEMENT_SQL_PARAMS_AS_QMARK: parameters will be rendered using the "?&lt;param_number&gt;" syntax where parameters are numbered starting from 1
@GDA_STATEMENT_SQL_PARAMS_AS_UQMARK: parameters will be rendered using the "?" syntax

<!-- ##### ENUM GdaStatementModelUsage ##### -->
<para>
These flags specify how the #GdaDataModel returned when executing a #GdaStatement will be used
</para>

@GDA_STATEMENT_MODEL_RANDOM_ACCESS: access to the data model will be random (usually this will result in a data model completely stored in memory)
@GDA_STATEMENT_MODEL_CURSOR_FORWARD: access to the data model will be done using a cursor moving forward
@GDA_STATEMENT_MODEL_CURSOR_BACKWARD: access to the data model will be done using a cursor moving backward
@GDA_STATEMENT_MODEL_CURSOR: access to the data model will be done using a cursor (moving both forward and backward)
@GDA_STATEMENT_MODEL_ALLOW_NOPARAM: specifies that the data model should be executed even if some parameters required to execute it are invalid (in this case the data model will have no row, and will automatically be re-run when the missing parameters are once again valid)

<!-- ##### ENUM GdaStatementError ##### -->
<para>

</para>

@GDA_STATEMENT_PARSE_ERROR: 
@GDA_STATEMENT_SYNTAX_ERROR: 
@GDA_STATEMENT_NO_CNC_ERROR: 
@GDA_STATEMENT_CNC_CLOSED_ERROR: 
@GDA_STATEMENT_EXEC_ERROR: 
@GDA_STATEMENT_PARAM_TYPE_ERROR: 
@GDA_STATEMENT_PARAM_ERROR: 

<!-- ##### FUNCTION gda_statement_new ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gda_statement_copy ##### -->
<para>

</para>

@orig: 
@Returns: 


<!-- ##### FUNCTION gda_statement_serialize ##### -->
<para>

</para>

@stmt: 
@Returns: 


<!-- ##### FUNCTION gda_statement_get_parameters ##### -->
<para>

</para>

@stmt: 
@out_params: 
@error: 
@Returns: 


<!-- ##### MACRO gda_statement_to_sql ##### -->
<para>

</para>

@stmt: 
@params: 
@error: 


<!-- ##### FUNCTION gda_statement_to_sql_extended ##### -->
<para>

</para>

@stmt: 
@cnc: 
@params: 
@flags: 
@params_used: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_statement_get_statement_type ##### -->
<para>

</para>

@stmt: 
@Returns: 


<!-- ##### FUNCTION gda_statement_is_useless ##### -->
<para>

</para>

@stmt: 
@Returns: 


<!-- ##### FUNCTION gda_statement_check_structure ##### -->
<para>

</para>

@stmt: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_statement_check_validity ##### -->
<para>

</para>

@stmt: 
@cnc: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_statement_normalize ##### -->
<para>

</para>

@stmt: 
@cnc: 
@error: 
@Returns: 


