<!-- ##### SECTION Title ##### -->
GdaXaTransaction

<!-- ##### SECTION Short_Description ##### -->
Distributed transaction manager

<!-- ##### SECTION Long_Description ##### -->
<para>
  The #GdaXaTransaction object acts as a distributed transaction manager: to make sure local transactions on several
  connections (to possibly different databases and database types) either all succeed or all fail. For more information,
  see the X/Open CAE document Distributed Transaction Processing: The XA Specification. 
  This document is published by The Open Group and available at 
  <ulink url="http://www.opengroup.org/public/pubs/catalog/c193.htm">http://www.opengroup.org/public/pubs/catalog/c193.htm</ulink>.
</para>
<para>
  The two phases commit protocol is implemented during the execution of a distributed transaction: modifications
  made on any connection are first <emphasis>prepared</emphasis> (which means that they are store in the database), and
  if that phase succeeded for all the involved connections, then the <emphasis>commit</emphasis> phase is executed
  (where all the data previously stored during the <emphasis>prepare</emphasis> phase are actually committed).
  That second phase may actually fail, but the distributed transaction will still be considered as sucessfull
  as the data stored during the <emphasis>prepare</emphasis> phase can be committed afterwards.
</para>
<para>
  A distributed transaction involves the following steps:
  <orderedlist>
    <listitem><para>Create a #GdaXaTransaction object</para></listitem>
    <listitem><para>Register the connections which will be part of the distributed transaction with that object
	using gda_xa_transaction_register_connection()</para></listitem>
    <listitem><para>Beging the distributed transaction using gda_xa_transaction_begin()</para></listitem>
    <listitem><para>Work individually on each connection as normally (make modifications)</para></listitem>
    <listitem><para>Commit the distributed transaction using gda_xa_transaction_commit()</para></listitem>
    <listitem><para>Discard the #GdaXaTransaction object using g_object_unref()</para></listitem>
  </orderedlist>
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### SECTION Image ##### -->


<!-- ##### STRUCT GdaXaTransaction ##### -->
<para>

</para>

@object: 
@priv: 

<!-- ##### ENUM GdaXaTransactionError ##### -->
<para>

</para>

@GDA_XA_TRANSACTION_ALREADY_REGISTERED_ERROR: 
@GDA_XA_TRANSACTION_DTP_NOT_SUPPORTED_ERROR: 

<!-- ##### STRUCT GdaXaTransactionId ##### -->
<para>
Distributed transaction identification, composed of a global format identifier, a global transaction identifier, and a
branch qualifier. For any connection participating in the global transaction, the format and global transaction identifier
should be the same, and the branch qualifier should vary between the connections.
</para>

@format: Format ID, should be 0 if OSI CCR naming is used, otherwise any positive integer
@gtrid_length: length of the global transaction ID (1-64)
@bqual_length: length of the branch qualification (1-64)
@data: concatenated global transaction ID (bytes 0 to (@gtrid_length -1) included) and branch qualification (bytes @gtrid_length to (@gtrid_length+@bqual_length - 1) included)

<!-- ##### FUNCTION gda_xa_transaction_new ##### -->
<para>

</para>

@format: 
@global_transaction_id: 
@Returns: 


<!-- ##### FUNCTION gda_xa_transaction_register_connection ##### -->
<para>

</para>

@xa_trans: 
@cnc: 
@branch: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_xa_transaction_unregister_connection ##### -->
<para>

</para>

@xa_trans: 
@cnc: 


<!-- ##### FUNCTION gda_xa_transaction_begin ##### -->
<para>

</para>

@xa_trans: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_xa_transaction_commit ##### -->
<para>

</para>

@xa_trans: 
@cnc_to_recover: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_xa_transaction_rollback ##### -->
<para>

</para>

@xa_trans: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_xa_transaction_commit_recovered ##### -->
<para>

</para>

@xa_trans: 
@cnc_to_recover: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_xa_transaction_id_to_string ##### -->
<para>

</para>

@xid: 
@Returns: 


<!-- ##### FUNCTION gda_xa_transaction_string_to_id ##### -->
<para>

</para>

@str: 
@Returns: 


