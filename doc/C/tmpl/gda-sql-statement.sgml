<!-- ##### SECTION Title ##### -->
GdaSqlStatement

<!-- ##### SECTION Short_Description ##### -->
Structure which decomposes an SQL statement

<!-- ##### SECTION Long_Description ##### -->
<para>
Every SQL statement can be decomposed in a #GdaSqlStatement structure. This is not a #GObject, but rather just a C structure
which can be manipulated directly. The structure is a tree composed of several key structures which are show in the following diagram
(even though it does not show, all structures "inherit" the #GdaSqlAnyPart structure which holds some basic information).
<mediaobject>
  <imageobject role="html">
    <imagedata fileref="parts.png" format="PNG"/>
  </imageobject>
  <caption>
    <para>
      Main parts of the #GdaSqlStatement structure.
    </para>
  </caption>
</mediaobject>
</para>
<para>
  The samples/SqlParserConsole directory of &LIBGDA;'s sources contains a small utility
  to display statements' structures as a graph (using the GraphViz language). It has been used to
  provide the examples in this section of the documentation.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT GdaSqlStatement ##### -->
<para>
Container structure for an SQL statement.
</para>

@sql: the actual SQL string which corresponds to the statement, or %NULL
@stmt_type: the type of statement (SELECT, INSERT, etc) as a #GdaSqlStatementType enum
@contents: the actual contents of the statement, depends on @stmt_type (can be a pointer to a
#GdaSqlStatementSelect, #GdaSqlStatementInsert, etc)
@validity_meta_struct: 

<!-- ##### ENUM GdaSqlStatementType ##### -->
<para>
Known types of statements
</para>

@GDA_SQL_STATEMENT_SELECT: a SELECT statement
@GDA_SQL_STATEMENT_INSERT: an INSERT statement
@GDA_SQL_STATEMENT_UPDATE: an UPDATE statement
@GDA_SQL_STATEMENT_DELETE: a DELETE statement
@GDA_SQL_STATEMENT_COMPOUND: a compound statement: multiple SELECT statements groupped together using an operator
@GDA_SQL_STATEMENT_BEGIN: start of transaction statement
@GDA_SQL_STATEMENT_ROLLBACK: transaction abort statement
@GDA_SQL_STATEMENT_COMMIT: transaction commit statement
@GDA_SQL_STATEMENT_SAVEPOINT: new savepoint definition statement
@GDA_SQL_STATEMENT_ROLLBACK_SAVEPOINT: return to savepoint statement
@GDA_SQL_STATEMENT_DELETE_SAVEPOINT: savepoint deletion statement
@GDA_SQL_STATEMENT_UNKNOWN: unknown statement, only identifies variables
@GDA_SQL_STATEMENT_NONE: not used

<!-- ##### FUNCTION gda_sql_statement_new ##### -->
<para>

</para>

@type: 
@Returns: 


<!-- ##### FUNCTION gda_sql_statement_copy ##### -->
<para>

</para>

@stmt: 
@Returns: 


<!-- ##### FUNCTION gda_sql_statement_free ##### -->
<para>

</para>

@stmt: 


<!-- ##### FUNCTION gda_sql_statement_serialize ##### -->
<para>

</para>

@stmt: 
@Returns: 


<!-- ##### FUNCTION gda_sql_statement_type_to_string ##### -->
<para>

</para>

@type: 
@Returns: 


<!-- ##### FUNCTION gda_sql_statement_string_to_type ##### -->
<para>

</para>

@type: 
@Returns: 


<!-- ##### FUNCTION gda_sql_statement_check_structure ##### -->
<para>

</para>

@stmt: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_sql_statement_check_validity ##### -->
<para>

</para>

@stmt: 
@cnc: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_sql_statement_check_clean ##### -->
<para>

</para>

@stmt: 


<!-- ##### FUNCTION gda_sql_statement_normalize ##### -->
<para>

</para>

@stmt: 
@cnc: 
@error: 
@Returns: 


<!-- ##### STRUCT GdaSqlAnyPart ##### -->
<para>
Base structure of which all structures (except #GdaSqlStatement) "inherit". It identifies, for each structure, its type and
its parent in the structure hierarchy.
</para>

@type: type of structure, as a #GdaSqlAnyPartType enum.
@parent: pointer to the parent #GdaSqlAnyPart structure

<!-- ##### ENUM GdaSqlAnyPartType ##### -->
<para>

</para>

@GDA_SQL_ANY_STMT_SELECT: structure is a #GdaSqlStatementSelect
@GDA_SQL_ANY_STMT_INSERT: structure is a #GdaSqlStatementInsert
@GDA_SQL_ANY_STMT_UPDATE: structure is a #GdaSqlStatementUpdate
@GDA_SQL_ANY_STMT_DELETE: structure is a #GdaSqlStatementDelete
@GDA_SQL_ANY_STMT_COMPOUND: structure is a #GdaSqlStatementCompound
@GDA_SQL_ANY_STMT_BEGIN: structure is a #GdaSqlStatementTransaction
@GDA_SQL_ANY_STMT_ROLLBACK: structure is a #GdaSqlStatementTransaction
@GDA_SQL_ANY_STMT_COMMIT: structure is a #GdaSqlStatementTransaction
@GDA_SQL_ANY_STMT_SAVEPOINT: structure is a #GdaSqlStatementTransaction
@GDA_SQL_ANY_STMT_ROLLBACK_SAVEPOINT: structure is a #GdaSqlStatementTransaction
@GDA_SQL_ANY_STMT_DELETE_SAVEPOINT: structure is a #GdaSqlStatementTransaction
@GDA_SQL_ANY_STMT_UNKNOWN: structure is a #GdaSqlStatementUnknown
@GDA_SQL_ANY_EXPR: structure is a #GdaSqlExpr
@GDA_SQL_ANY_SQL_FIELD: structure is a #GdaSqlField
@GDA_SQL_ANY_SQL_TABLE: structure is a #GdaSqlTable
@GDA_SQL_ANY_SQL_FUNCTION: structure is a #GdaSqlFunction
@GDA_SQL_ANY_SQL_OPERATION: structure is a #GdaSqlOperation
@GDA_SQL_ANY_SQL_CASE: structure is a #GdaSqlCase
@GDA_SQL_ANY_SQL_SELECT_FIELD: structure is a #GdaSqlSelectField
@GDA_SQL_ANY_SQL_SELECT_TARGET: structure is a #GdaSqlSelectTarget
@GDA_SQL_ANY_SQL_SELECT_JOIN: structure is a #GdaSqlSelectJoin
@GDA_SQL_ANY_SQL_SELECT_FROM: structure is a #GdaSqlSelectFrom
@GDA_SQL_ANY_SQL_SELECT_ORDER: structure is a #GdaSqlSelectOrder

<!-- ##### MACRO GDA_SQL_ANY_PART ##### -->
<para>

</para>

@x: 


<!-- ##### USER_FUNCTION GdaSqlForeachFunc ##### -->
<para>
Specifies the type of functions passed to gda_sql_any_part_foreach().
</para>

@Param1: the current #GdaSqlAnyPart node
@Param2: user data passed to gda_sql_any_part_foreach().
@Param3: pointer to a place to store errors
@Returns: FALSE if the gda_sql_any_part_foreach() should stop at this point and fail


<!-- ##### FUNCTION gda_sql_any_part_foreach ##### -->
<para>

</para>

@node: 
@func: 
@data: 
@error: 
@Returns: 


<!-- ##### STRUCT GdaSqlStatementUnknown ##### -->
<para>
  The SQL statement is of an unknown type (not any of the other parsed types). Such structure is created by the #GdaSqlParser object
  when it cannot parse the SQL string, or when operating in delimiter mode (it only tries to delimit statements if there are several
  ones in the same SQL string).
<mediaobject>
  <imageobject role="html">
    <imagedata fileref="stmt-unknown.png" format="PNG"/>
  </imageobject>
  <caption>
    <para>
      Example of a #GdaSqlStatement having a #GdaSqlStatementUnknown as its contents (the parsed string is "a string;" which
      is not a valid SQL statement). The arrows are named after the attribute they represent (here the "expressions" attribute).
      Lists are represented by the GSList nodes and a "data" pointer which points to the data, and a "next" pointer which
      points to the next node in the list, all of the graphical items are in gray.
    </para>
  </caption>
</mediaobject>
</para>

@any: inheritance structure
@expressions: a #GSList of #GdaSqlExpr expressions

<!-- ##### FUNCTION gda_sql_statement_unknown_take_expressions ##### -->
<para>

</para>

@stmt: 
@expressions: 


<!-- ##### STRUCT GdaSqlStatementTransaction ##### -->
<para>
  The statement is a transaction management related statement (BEGIN, ROLLBACK, etc). The #GdaSqlStatementTransaction structure
  does not hold enough information to reconstruct the complete SQL statement (some information may be missing) - the aim of this
  structure is to identify a minimum set of information in the transaction statement. Note that the complete SQL which created the
  statement should be available in the #GdaSqlStatement structure which encapsulates this structure.
</para>

@any: inheritance structure
@isolation_level: isolation level as a #GdaTransactionIsolation
@trans_mode: transaction mode (DEFERRED, IMMEDIATE, EXCLUSIVE, READ_WRITE, READ_ONLY)
@trans_name: transaction name

<!-- ##### FUNCTION gda_sql_statement_trans_take_mode ##### -->
<para>

</para>

@stmt: 
@value: 


<!-- ##### FUNCTION gda_sql_statement_trans_take_name ##### -->
<para>

</para>

@stmt: 
@value: 


<!-- ##### FUNCTION gda_sql_statement_trans_set_isol_level ##### -->
<para>

</para>

@stmt: 
@level: 


<!-- ##### STRUCT GdaSqlStatementSelect ##### -->
<para>
  The statement is a SELECT statement, any kind of SELECT statement can be represented using this structure 
  (if this is not the case
  then report a bug).
  <mediaobject>
    <imageobject role="html">
      <imagedata fileref="stmt-select.png" format="PNG"/>
    </imageobject>
    <caption>
      <para>
	Example of a #GdaSqlStatement having a #GdaSqlStatementSelect as its contents.
      </para>
    </caption>
  </mediaobject>
</para>

@any: inheritance structure
@distinct: TRUE if a DISTINCT clause applies
@distinct_expr: expression on which the distinct applies, or %NULL
@expr_list: list of expressions (as #GdaSqlSelectField pointers), one for each column in the data set returned by the execution of the statement
@from: target(s) of the SELECT statement
@where_cond: condition expression filtering the resulting data set (WHERE condition)
@group_by: grouping expressions (as #GdaSqlExpr pointers)
@having_cond: condition expression filtering the groupped expressions (HAVING condition)
@order_by: ordering expressions (as #GdaSqlSelectOrder pointers)
@limit_count: size limiting expression (LIMIT clause)
@limit_offset: when @limit_count is defined, the start offset for the limit

<!-- ##### FUNCTION gda_sql_statement_select_take_distinct ##### -->
<para>

</para>

@stmt: 
@distinct: 
@distinct_expr: 


<!-- ##### FUNCTION gda_sql_statement_select_take_expr_list ##### -->
<para>

</para>

@stmt: 
@expr_list: 


<!-- ##### FUNCTION gda_sql_statement_select_take_from ##### -->
<para>

</para>

@stmt: 
@from: 


<!-- ##### FUNCTION gda_sql_statement_select_take_where_cond ##### -->
<para>

</para>

@stmt: 
@expr: 


<!-- ##### FUNCTION gda_sql_statement_select_take_group_by ##### -->
<para>

</para>

@stmt: 
@group_by: 


<!-- ##### FUNCTION gda_sql_statement_select_take_having_cond ##### -->
<para>

</para>

@stmt: 
@expr: 


<!-- ##### FUNCTION gda_sql_statement_select_take_order_by ##### -->
<para>

</para>

@stmt: 
@order_by: 


<!-- ##### FUNCTION gda_sql_statement_select_take_limits ##### -->
<para>

</para>

@stmt: 
@count: 
@offset: 


<!-- ##### STRUCT GdaSqlStatementInsert ##### -->
<para>
  The statement is an INSERT statement, any kind of INSERT statement can be represented using this structure 
  (if this is not the case
  then report a bug).
  <mediaobject>
    <imageobject role="html">
      <imagedata fileref="stmt-insert1.png" format="PNG"/>
    </imageobject>
    <caption>
      <para>
	Example of a #GdaSqlStatement having a #GdaSqlStatementInsert as its contents with 2 lists of values
	to insert.
      </para>
    </caption>
  </mediaobject>
  <mediaobject>
    <imageobject role="html">
      <imagedata fileref="stmt-insert2.png" format="PNG"/>
    </imageobject>
    <caption>
      <para>
	Another example of a #GdaSqlStatement having a #GdaSqlStatementInsert as its contents, using a SELECT
	to express the values to insert.
      </para>
    </caption>
  </mediaobject>
</para>

@any: inheritance structure
@on_conflict: conflict resolution clause if there is one (such as "OR REPLACE")
@table: name of the table to which data is inserted
@fields_list: list of #GdaSqlField fields which are valued for insertion
@values_list: list of list of #GdaSqlExpr expressions (this is a list of list, not a simple list)
@select: a #GdaSqlStatementSelect or #GdaSqlStatementCompound structure representing the values to insert

<!-- ##### FUNCTION gda_sql_statement_insert_take_table_name ##### -->
<para>

</para>

@stmt: 
@value: 


<!-- ##### FUNCTION gda_sql_statement_insert_take_on_conflict ##### -->
<para>

</para>

@stmt: 
@value: 


<!-- ##### FUNCTION gda_sql_statement_insert_take_fields_list ##### -->
<para>

</para>

@stmt: 
@list: 


<!-- ##### FUNCTION gda_sql_statement_insert_take_1_values_list ##### -->
<para>

</para>

@stmt: 
@list: 


<!-- ##### FUNCTION gda_sql_statement_insert_take_extra_values_list ##### -->
<para>

</para>

@stmt: 
@list: 


<!-- ##### FUNCTION gda_sql_statement_insert_take_select ##### -->
<para>

</para>

@stmt: 
@select: 


<!-- ##### STRUCT GdaSqlStatementDelete ##### -->
<para>
  The statement is a DELETE statement, any kind of DELETE statement can be represented using this structure 
  (if this is not the case
  then report a bug).
</para>

@any: inheritance structure
@table: name of the table from which data is deleted
@cond: WHERE clause for the DELETE

<!-- ##### FUNCTION gda_sql_statement_delete_take_table_name ##### -->
<para>

</para>

@stmt: 
@value: 


<!-- ##### FUNCTION gda_sql_statement_delete_take_condition ##### -->
<para>

</para>

@stmt: 
@cond: 


<!-- ##### STRUCT GdaSqlStatementUpdate ##### -->
<para>
  The statement is an UPDATE statement, any kind of UPDATE statement can be represented using this structure 
  (if this is not the case
  then report a bug).
  <mediaobject>
    <imageobject role="html">
      <imagedata fileref="stmt-update.png" format="PNG"/>
    </imageobject>
    <caption>
      <para>
	Example of a #GdaSqlStatement having a #GdaSqlStatementUpdate as its contents.
      </para>
    </caption>
  </mediaobject>
</para>

@any: inheritance structure
@on_conflict: conflict resolution clause if there is one (such as "OR REPLACE")
@table: name of the table to which data is updated
@fields_list: list of #GdaSqlField fields which are updated
@expr_list: list of #GdaSqlExpr expressions containing the new values
@cond: WHERE clause for the UPDATE

<!-- ##### FUNCTION gda_sql_statement_update_take_table_name ##### -->
<para>

</para>

@stmt: 
@value: 


<!-- ##### FUNCTION gda_sql_statement_update_take_on_conflict ##### -->
<para>

</para>

@stmt: 
@value: 


<!-- ##### FUNCTION gda_sql_statement_update_take_condition ##### -->
<para>

</para>

@stmt: 
@cond: 


<!-- ##### FUNCTION gda_sql_statement_update_take_set_value ##### -->
<para>

</para>

@stmt: 
@fname: 
@expr: 


<!-- ##### STRUCT GdaSqlStatementCompound ##### -->
<para>
  The statement is a compound selection statement: multiple SELECT or compound statements composed together with UNION, EXCEPT or
  INSERSECT operations. Any kind of compound statement can be represented using this structure 
  (if this is not the case
  then report a bug).
  <mediaobject>
    <imageobject role="html">
      <imagedata fileref="stmt-compound.png" format="PNG"/>
    </imageobject>
    <caption>
      <para>
	Example of a #GdaSqlStatement having a #GdaSqlStatementCompound as its contents.
      </para>
    </caption>
  </mediaobject>
</para>

@any: inheritance structure
@compound_type: the type of operation to compose the selection or compound statements making this statement
@stmt_list: a list of #GdaSqlStatement making this statement

<!-- ##### FUNCTION gda_sql_statement_compound_set_type ##### -->
<para>

</para>

@stmt: 
@type: 


<!-- ##### FUNCTION gda_sql_statement_compound_take_stmt ##### -->
<para>

</para>

@stmt: 
@s: 


<!-- ##### FUNCTION gda_sql_statement_compound_reduce ##### -->
<para>

</para>

@compound_or_select: 
@Returns: 


<!-- ##### STRUCT GdaSqlExpr ##### -->
<para>
  This structure contains any expression, either as a value (the @value part is set), a variable (the @param_spec is set),
  or as other types of expressions.
</para>

@any: inheritance structure
@value: a #GValue, or %NULL
@param_spec: a #GdaSqlParamSpec, or %NULL if this is not a variable
@func: not %NULL if expression is a function or aggregate
@cond: not %NULL if expression is a condition or an operation
@select: not %NULL if expression is a sub select statement (#GdaSqlStatementSelect or #GdaSqlStatementCompound)
@case_s: not %NULL if expression is a CASE WHEN ... expression
@cast_as: not %NULL if expression must be cast to another data type

<!-- ##### STRUCT GdaSqlParamSpec ##### -->
<para>

</para>

@name: 
@descr: 
@is_param: 
@nullok: 
@g_type: 
@validity_meta_dict: 

<!-- ##### FUNCTION gda_sql_param_spec_new ##### -->
<para>

</para>

@simple_spec: 
@Returns: 


<!-- ##### FUNCTION gda_sql_param_spec_copy ##### -->
<para>

</para>

@pspec: 
@Returns: 


<!-- ##### FUNCTION gda_sql_param_spec_take_name ##### -->
<para>

</para>

@pspec: 
@value: 


<!-- ##### FUNCTION gda_sql_param_spec_take_type ##### -->
<para>

</para>

@pspec: 
@value: 


<!-- ##### FUNCTION gda_sql_param_spec_take_descr ##### -->
<para>

</para>

@pspec: 
@value: 


<!-- ##### FUNCTION gda_sql_param_spec_take_nullok ##### -->
<para>

</para>

@pspec: 
@value: 


<!-- ##### FUNCTION gda_sql_param_spec_free ##### -->
<para>

</para>

@pspec: 


<!-- ##### FUNCTION gda_sql_param_spec_serialize ##### -->
<para>

</para>

@pspec: 
@Returns: 


<!-- ##### STRUCT GdaSqlField ##### -->
<para>
  This structure represents the name of a table's field.
</para>


<!-- ##### STRUCT GdaSqlTable ##### -->
<para>
  This structure represents the name of a table.
</para>


<!-- ##### FUNCTION gda_sql_table_new ##### -->
<para>

</para>

@parent: 
@Returns: 


<!-- ##### FUNCTION gda_sql_table_free ##### -->
<para>

</para>

@table: 


<!-- ##### FUNCTION gda_sql_table_copy ##### -->
<para>

</para>

@table: 
@Returns: 


<!-- ##### FUNCTION gda_sql_table_serialize ##### -->
<para>

</para>

@table: 
@Returns: 


<!-- ##### FUNCTION gda_sql_table_take_name ##### -->
<para>

</para>

@table: 
@value: 


<!-- ##### STRUCT GdaSqlFunction ##### -->
<para>
  This structure represents a function or an aggregate with zero or more arguments.
</para>

@any: inheritance structure
@function_name: name of the function , in the form [[catalog.]schema.]function_name
@args_list: list of #GdaSqlExpr expressions, one for each argument
@validity_meta_function: 

<!-- ##### FUNCTION gda_sql_function_new ##### -->
<para>

</para>

@parent: 
@Returns: 


<!-- ##### FUNCTION gda_sql_function_free ##### -->
<para>

</para>

@function: 


<!-- ##### FUNCTION gda_sql_function_copy ##### -->
<para>

</para>

@function: 
@Returns: 


<!-- ##### FUNCTION gda_sql_function_serialize ##### -->
<para>

</para>

@function: 
@Returns: 


<!-- ##### FUNCTION gda_sql_function_take_name ##### -->
<para>

</para>

@function: 
@value: 


<!-- ##### FUNCTION gda_sql_function_take_args_list ##### -->
<para>

</para>

@function: 
@args: 


<!-- ##### STRUCT GdaSqlOperation ##### -->
<para>
  This structure represents an operation between one or more operands
</para>

@any: inheritance structure
@operator_type: 
@operands: list of #GdaSqlExpr operands

<!-- ##### ENUM GdaSqlOperatorType ##### -->
<para>

</para>

@GDA_SQL_OPERATOR_TYPE_AND: 
@GDA_SQL_OPERATOR_TYPE_OR: 
@GDA_SQL_OPERATOR_TYPE_EQ: 
@GDA_SQL_OPERATOR_TYPE_IS: 
@GDA_SQL_OPERATOR_TYPE_LIKE: 
@GDA_SQL_OPERATOR_TYPE_BETWEEN: 
@GDA_SQL_OPERATOR_TYPE_GT: 
@GDA_SQL_OPERATOR_TYPE_LT: 
@GDA_SQL_OPERATOR_TYPE_GEQ: 
@GDA_SQL_OPERATOR_TYPE_LEQ: 
@GDA_SQL_OPERATOR_TYPE_DIFF: 
@GDA_SQL_OPERATOR_TYPE_REGEXP: 
@GDA_SQL_OPERATOR_TYPE_REGEXP_CI: 
@GDA_SQL_OPERATOR_TYPE_NOT_REGEXP: 
@GDA_SQL_OPERATOR_TYPE_NOT_REGEXP_CI: 
@GDA_SQL_OPERATOR_TYPE_SIMILAR: 
@GDA_SQL_OPERATOR_TYPE_ISNULL: 
@GDA_SQL_OPERATOR_TYPE_ISNOTNULL: 
@GDA_SQL_OPERATOR_TYPE_NOT: 
@GDA_SQL_OPERATOR_TYPE_IN: 
@GDA_SQL_OPERATOR_TYPE_NOTIN: 
@GDA_SQL_OPERATOR_TYPE_CONCAT: 
@GDA_SQL_OPERATOR_TYPE_PLUS: 
@GDA_SQL_OPERATOR_TYPE_MINUS: 
@GDA_SQL_OPERATOR_TYPE_STAR: 
@GDA_SQL_OPERATOR_TYPE_DIV: 
@GDA_SQL_OPERATOR_TYPE_REM: 
@GDA_SQL_OPERATOR_TYPE_BITAND: 
@GDA_SQL_OPERATOR_TYPE_BITOR: 
@GDA_SQL_OPERATOR_TYPE_BITNOT: 

<!-- ##### FUNCTION gda_sql_operation_new ##### -->
<para>

</para>

@parent: 
@Returns: 


<!-- ##### FUNCTION gda_sql_operation_free ##### -->
<para>

</para>

@operation: 


<!-- ##### FUNCTION gda_sql_operation_copy ##### -->
<para>

</para>

@operation: 
@Returns: 


<!-- ##### FUNCTION gda_sql_operation_serialize ##### -->
<para>

</para>

@operation: 
@Returns: 


<!-- ##### FUNCTION gda_sql_operation_operator_to_string ##### -->
<para>

</para>

@op: 
@Returns: 


<!-- ##### FUNCTION gda_sql_operation_operator_from_string ##### -->
<para>

</para>

@op: 
@Returns: 


<!-- ##### STRUCT GdaSqlCase ##### -->
<para>
  This structure represents a CASE WHEN... construct
</para>

@any: inheritance structure
@base_expr: expression to test
@when_expr_list: list of #GdaSqlExpr, one for each WHEN clause
@then_expr_list: list of #GdaSqlExpr, one for each THEN clause
@else_expr: default expression for the CASE

<!-- ##### FUNCTION gda_sql_case_new ##### -->
<para>

</para>

@parent: 
@Returns: 


<!-- ##### FUNCTION gda_sql_case_free ##### -->
<para>

</para>

@scase: 


<!-- ##### FUNCTION gda_sql_case_copy ##### -->
<para>

</para>

@scase: 
@Returns: 


<!-- ##### FUNCTION gda_sql_case_serialize ##### -->
<para>

</para>

@scase: 
@Returns: 


<!-- ##### STRUCT GdaSqlSelectField ##### -->
<para>
  This structure represents a selected item in a SELECT statement (when executed, the returned data set
  will have one column per selected item). Note that the @table_name and 
  @table field parts <emphasis>will be</emphasis> overwritten by &LIBGDA;,
  set the value of @expr->value instead.
</para>

@any: inheritance structure
@expr: expression
@field_name: field name part of @expr if @expr represents a field
@table_name: table name part of @expr if @expr represents a field
@as: alias
@validity_meta_object: 
@validity_meta_table_column: 

<!-- ##### FUNCTION gda_sql_select_field_new ##### -->
<para>

</para>

@parent: 
@Returns: 


<!-- ##### FUNCTION gda_sql_select_field_free ##### -->
<para>

</para>

@field: 


<!-- ##### FUNCTION gda_sql_select_field_copy ##### -->
<para>

</para>

@field: 
@Returns: 


<!-- ##### FUNCTION gda_sql_select_field_serialize ##### -->
<para>

</para>

@field: 
@Returns: 


<!-- ##### FUNCTION gda_sql_select_field_take_star_value ##### -->
<para>

</para>

@field: 
@value: 


<!-- ##### FUNCTION gda_sql_select_field_take_expr ##### -->
<para>

</para>

@field: 
@expr: 


<!-- ##### FUNCTION gda_sql_select_field_take_alias ##### -->
<para>

</para>

@field: 
@alias: 


<!-- ##### STRUCT GdaSqlSelectTarget ##### -->
<para>
  This structure represents a target used to fetch data from in a SELECT statement; it can represent a table or
  a sub select. Note that the @table_name
  part <emphasis>will be</emphasis> overwritten by &LIBGDA;,
  set the value of @expr->value instead.
</para>

@any: inheritance structure
@expr: expression
@table_name: table name part of @expr if @expr represents a table
@as: alias
@validity_meta_object: 

<!-- ##### FUNCTION gda_sql_select_target_new ##### -->
<para>

</para>

@parent: 
@Returns: 


<!-- ##### FUNCTION gda_sql_select_target_free ##### -->
<para>

</para>

@target: 


<!-- ##### FUNCTION gda_sql_select_target_copy ##### -->
<para>

</para>

@target: 
@Returns: 


<!-- ##### FUNCTION gda_sql_select_target_serialize ##### -->
<para>

</para>

@target: 
@Returns: 


<!-- ##### FUNCTION gda_sql_select_target_take_table_name ##### -->
<para>

</para>

@target: 
@value: 


<!-- ##### FUNCTION gda_sql_select_target_take_select ##### -->
<para>

</para>

@target: 
@stmt: 


<!-- ##### FUNCTION gda_sql_select_target_take_alias ##### -->
<para>

</para>

@target: 
@alias: 


<!-- ##### STRUCT GdaSqlSelectJoin ##### -->
<para>
  This structure represents a join between two targets in a SELECT statement.
</para>

@any: inheritance structure
@type: type of join
@position: represents a join between a target at (pos &lt; @position) and the one at @position
@expr: joining expression
@use: 

<!-- ##### FUNCTION gda_sql_select_join_new ##### -->
<para>

</para>

@parent: 
@Returns: 


<!-- ##### FUNCTION gda_sql_select_join_free ##### -->
<para>

</para>

@join: 


<!-- ##### FUNCTION gda_sql_select_join_copy ##### -->
<para>

</para>

@join: 
@Returns: 


<!-- ##### FUNCTION gda_sql_select_join_serialize ##### -->
<para>

</para>

@join: 
@Returns: 


<!-- ##### FUNCTION gda_sql_select_join_type_to_string ##### -->
<para>

</para>

@type: 
@Returns: 


<!-- ##### STRUCT GdaSqlSelectFrom ##### -->
<para>
  This structure represents the FROM clause of a SELECT statement, it lists targets and joins
</para>

@any: inheritance structure
@targets: list of #GdaSqlSelectTarget
@joins: list of #GdaSqlSelectJoin

<!-- ##### FUNCTION gda_sql_select_from_new ##### -->
<para>

</para>

@parent: 
@Returns: 


<!-- ##### FUNCTION gda_sql_select_from_free ##### -->
<para>

</para>

@from: 


<!-- ##### FUNCTION gda_sql_select_from_copy ##### -->
<para>

</para>

@from: 
@Returns: 


<!-- ##### FUNCTION gda_sql_select_from_serialize ##### -->
<para>

</para>

@from: 
@Returns: 


<!-- ##### FUNCTION gda_sql_select_from_take_new_target ##### -->
<para>

</para>

@from: 
@target: 


<!-- ##### FUNCTION gda_sql_select_from_take_new_join ##### -->
<para>

</para>

@from: 
@join: 


<!-- ##### STRUCT GdaSqlSelectOrder ##### -->
<para>
  This structure represents the ordering of a SELECT statement
</para>

@any: inheritance structure
@expr: expression to order on
@asc: TRUE is ordering is ascending
@collation_name: name of the collation to use for ordering

<!-- ##### FUNCTION gda_sql_select_order_new ##### -->
<para>

</para>

@parent: 
@Returns: 


<!-- ##### FUNCTION gda_sql_select_order_free ##### -->
<para>

</para>

@order: 


<!-- ##### FUNCTION gda_sql_select_order_copy ##### -->
<para>

</para>

@order: 
@Returns: 


<!-- ##### FUNCTION gda_sql_select_order_serialize ##### -->
<para>

</para>

@order: 
@Returns: 


