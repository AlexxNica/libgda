<!-- ##### SECTION Title ##### -->
GdaPModel

<!-- ##### SECTION Short_Description ##### -->
Proposed base implementation for data models returned by the execution of a SELECT statement

<!-- ##### SECTION Long_Description ##### -->
<para>
  This data model implements the <link linkend="GdaDataModel">GdaDataModel</link> interface and is the proposed
  base object when database providers implement a data model returned when a SELECT statement has been executed.
</para>
<para>
  Specifically it offers the following features:
  <itemizedlist>
    <listitem><para>Manages its list of <link linkend="GdaColumn">GdaColumn</link> using the list exported by the prepared statement object (<link linkend="GdaPStmt">GdaPStmt</link>)</para></listitem>
    <listitem><para>Allows random or cursor based access</para></listitem>
    <listitem><para>Allows for efficient memory usage allowing the subclass to finely tune its memory usage</para></listitem>
    <listitem><para>Will provide a generic mechanism for writable data models</para></listitem>
  </itemizedlist>
</para>
<para>
  See the <link linkend="libgda-provider-recordset">Virtual methods for recordsets</link> section for more information
  about how to implement the virtual methods.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT GdaPModel ##### -->
<para>

</para>

@object: base object
@priv: private data
@prep_stmt: SELECT prepared statement for which the execution gave this object
@nb_stored_rows: 
@advertized_nrows: initially set to -1, set to a value >= 0 when the number of rows in the data model is known

<!-- ##### STRUCT GdaPModelClass ##### -->
<para>

</para>

@parent_class: parent object class
@fetch_nb_rows: virtual method which must be implemented when access method is GDA_DATA_MODEL_ACCESS_RANDOM
@fetch_random: virtual method which must be implemented when access method is GDA_DATA_MODEL_ACCESS_RANDOM
@store_all: 
@fetch_next: virtual method which must be implemented when access method is GDA_DATA_MODEL_ACCESS_CURSOR_FORWARD
@fetch_prev: virtual method which must be implemented when access method is GDA_DATA_MODEL_ACCESS_CURSOR_BACKWARD
@fetch_at: virtual method which can be implemented when access method is GDA_DATA_MODEL_ACCESS_CURSOR_FORWARD or GDA_DATA_MODEL_ACCESS_CURSOR_BACKWARD

<!-- ##### FUNCTION gda_pmodel_take_row ##### -->
<para>

</para>

@model: 
@row: 
@rownum: 


<!-- ##### FUNCTION gda_pmodel_get_stored_row ##### -->
<para>

</para>

@model: 
@rownum: 
@Returns: 


<!-- ##### FUNCTION gda_pmodel_get_connection ##### -->
<para>

</para>

@model: 
@Returns: 


<!-- ##### FUNCTION gda_pmodel_set_modification_statement ##### -->
<para>

</para>

@model: 
@mod_stmt: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_pmodel_compute_modification_statements ##### -->
<para>

</para>

@model: 
@require_pk: 
@error: 
@Returns: 


