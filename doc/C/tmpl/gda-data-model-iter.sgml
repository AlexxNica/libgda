<!-- ##### SECTION Title ##### -->
GdaDataModelIter

<!-- ##### SECTION Short_Description ##### -->
Data model iterator

<!-- ##### SECTION Long_Description ##### -->
<para>
  A #GdaDataModelIter object is used to iterate through the rows of a #GdaDataModel. If the data model is accessible
  in a random access way then any number of #GdaDataModelIter objects can be created on the same data model, and
  if the data model only supports a cursor based access then only one #GdaDataModelIter can be created. In any case
  creating a #GdaDataModelIter should be done using the gda_data_model_create_iter() method. Note that if 
  the data model only supports a cursor based access, then calling this method several times will always return
  the same #GdaDataModelIter, but with its reference count increased by 1 (so you should call g_object_unref() when
  finished with it).
</para>
<para>
  When a #GdaDataModelIter is valid (that is when it points to an existing row in the data model it iterates through),
  the individual values (corresponding to each column of the data model, at the pointer row) can be accessed 
  using the gda_data_model_iter_get_value_at() or gda_data_model_iter_get_value_for_field() methods
  (or in the same way #GdaSet's values are accessed as #GdaDataModelIter inherits the #GdaSet).
</para>
<para>
  Right after being created, a #GdaDataModelIter is invalid (does not point to any row of its data model). To read the
  first row of the data model, use the gda_data_model_iter_move_next() method. Calling this method several times will
  move the iterator forward, up to when the data model has no more rows and the #GdaDataModelIter will be declared invalid
  (and gda_data_model_iter_move_next() has returned FALSE). Note that at this point, the number of rows in the data
  model will be known.
</para>
<para>
  If the data model supports it, a #GdaDataModelIter can be moved backwards using the gda_data_model_iter_move_prev()
  method. However if the iterator is invalid, moving backwards will not be possible (on the contrary to 
  gda_data_model_iter_move_next() which moves to the first row).
</para>
<para>
  The gda_data_model_iter_move_to_row() method, if the iterator can be moved both forward and backwards, can move the 
  iterator to a specific row (sometimes faster than moving it forward or backwards a number of times).
</para>
<para>
  The following figure illustrates the #GdaDataModelIter usage:
  <mediaobject>
    <imageobject role="html">
      <imagedata fileref="GdaDataModelIter.png" format="PNG" contentwidth="180mm"/>
    </imageobject>
    <textobject>
      <phrase>GdaDataModelIter's usage</phrase>
    </textobject>
  </mediaobject>
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### SECTION Image ##### -->


<!-- ##### STRUCT GdaDataModelIter ##### -->
<para>

</para>


<!-- ##### SIGNAL GdaDataModelIter::end-of-data ##### -->
<para>

</para>

@gdadatamodeliter: the object which received the signal.

<!-- ##### SIGNAL GdaDataModelIter::row-changed ##### -->
<para>

</para>

@gdadatamodeliter: the object which received the signal.
@arg1: 

<!-- ##### ARG GdaDataModelIter:current-row ##### -->
<para>

</para>

<!-- ##### ARG GdaDataModelIter:data-model ##### -->
<para>

</para>

<!-- ##### ARG GdaDataModelIter:forced-model ##### -->
<para>

</para>

<!-- ##### ARG GdaDataModelIter:update-model ##### -->
<para>

</para>

<!-- ##### FUNCTION gda_data_model_iter_get_value_at ##### -->
<para>

</para>

@iter: 
@col: 
@Returns: 


<!-- ##### FUNCTION gda_data_model_iter_get_value_for_field ##### -->
<para>

</para>

@iter: 
@field_name: 
@Returns: 


<!-- ##### FUNCTION gda_data_model_iter_set_value_at ##### -->
<para>

</para>

@iter: 
@col: 
@value: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_data_model_iter_is_valid ##### -->
<para>

</para>

@iter: 
@Returns: 


<!-- ##### FUNCTION gda_data_model_iter_move_to_row ##### -->
<para>

</para>

@iter: 
@row: 
@Returns: 


<!-- ##### FUNCTION gda_data_model_iter_move_next ##### -->
<para>

</para>

@iter: 
@Returns: 


<!-- ##### FUNCTION gda_data_model_iter_move_prev ##### -->
<para>

</para>

@iter: 
@Returns: 


<!-- ##### FUNCTION gda_data_model_iter_get_row ##### -->
<para>

</para>

@iter: 
@Returns: 


<!-- ##### FUNCTION gda_data_model_iter_get_holder_for_field ##### -->
<para>

</para>

@iter: 
@col: 
@Returns: 


<!-- ##### FUNCTION gda_data_model_iter_invalidate_contents ##### -->
<para>

</para>

@iter: 


