<!-- ##### SECTION Title ##### -->
GdaClient

<!-- ##### SECTION Short_Description ##### -->
Database client access

<!-- ##### SECTION Long_Description ##### -->
<para>
  This class is the main entry point for libgda client applications. It provides
  the way by which client applications open connections. Thus, before using any other
  database-oriented function in libgda, applications must create a #GdaClient object
  (via gda_client_new()), and, once created, open the connections from it.
</para>
<para>
  #GdaClient also provides a way to treat several connections as if they were only
  one (a connection pool), which allows applications to, for instance, commit/rollback
  a transaction in all the connections being managed by a unique #GdaClient object, or
  obtain the list of all tables in all opened connections.
</para>
<para>
  Database creation and destruction is done through a #GdaClient object uding the
  gda_client_prepare_create_database(), gda_client_perform_create_database(), 
  gda_client_prepare_drop_database() and gda_client_perform_drop_database() methods. Note however that 
  depending on the provider, an opened connection may be required in order to create
  or destroy a database.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
 #GdaConnection.
</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT GdaClient ##### -->
<para>

</para>


<!-- ##### SIGNAL GdaClient::event-notification ##### -->
<para>

</para>

@gdaclient: the object which received the signal.
@arg1: 
@arg2: 
@arg3: 

<!-- ##### ENUM GdaClientError ##### -->
<para>

</para>

@GDA_CLIENT_DSN_NOT_FOUND_ERROR: 
@GDA_CLIENT_PROVIDER_NOT_FOUND_ERROR: 

<!-- ##### ENUM GdaClientEvent ##### -->
<para>

</para>

@GDA_CLIENT_EVENT_INVALID: 
@GDA_CLIENT_EVENT_ERROR: 
@GDA_CLIENT_EVENT_CONNECTION_OPENED: 
@GDA_CLIENT_EVENT_CONNECTION_CLOSED: 
@GDA_CLIENT_EVENT_TRANSACTION_STARTED: 
@GDA_CLIENT_EVENT_TRANSACTION_COMMITTED: 
@GDA_CLIENT_EVENT_TRANSACTION_CANCELLED: 

<!-- ##### FUNCTION gda_client_new ##### -->
<para>

</para>

@Returns: 


<!-- ##### FUNCTION gda_client_open_connection ##### -->
<para>

</para>

@client: 
@dsn: 
@auth_string: 
@options: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_client_open_connection_from_string ##### -->
<para>

</para>

@client: 
@provider_id: 
@cnc_string: 
@auth_string: 
@options: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_client_get_connections ##### -->
<para>

</para>

@client: 
@Returns: 


<!-- ##### FUNCTION gda_client_prepare_create_database ##### -->
<para>

</para>

@client: 
@db_name: 
@provider: 
@Returns: 


<!-- ##### FUNCTION gda_client_perform_create_database ##### -->
<para>

</para>

@client: 
@op: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_client_prepare_drop_database ##### -->
<para>

</para>

@client: 
@db_name: 
@provider: 
@Returns: 


<!-- ##### FUNCTION gda_client_perform_drop_database ##### -->
<para>

</para>

@client: 
@op: 
@error: 
@Returns: 


