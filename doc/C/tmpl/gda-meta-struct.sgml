<!-- ##### SECTION Title ##### -->
GdaMetaStruct

<!-- ##### SECTION Short_Description ##### -->
In memory representation of some database objects

<!-- ##### SECTION Long_Description ##### -->
<para>
  The #GdaMetaStruct object reads data from a #GdaMetaStore object and
  creates an easy to use in memory representation for some database objects. For example one can easily
  analyse the columns of a table (or its foreign keys) using a #GdaMetaStruct.
</para>
<para>
  When created, the new #GdaMetaStruct object is empty (it does not have any information about any database object).
  Information about database objects is computed upon request using the gda_meta_struct_complement() method. Information
  about individual database objects is represented by #GdaMetaDbObject structures, which can be obtained using
  gda_meta_struct_get_db_object() or gda_meta_struct_get_all_db_objects().
</para>
<para>
  Note that the #GdaMetaDbObject structures may change or may be removed or replaced by others, so it not
  advised to keep pointers to these structures: pointers to these structures should be considered valid
  as long as gda_meta_struct_complement() and other similar functions have not been called.
</para>
<para>
  In the following code sample, one prints the columns names and types of a table:
  <programlisting>
GdaMetaStruct *mstruct;
GdaMetaDbObject *dbo;
GValue *catalog, *schema, *name;

/* Define name (and optionnally catalog and schema) */
[...]

mstruct = gda_meta_struct_new ();
gda_meta_struct_complement (mstruct, store, GDA_META_DB_TABLE, catalog, schema, name, NULL);
dbo = gda_meta_struct_get_db_object (mstruct, catalog, schema, name);
if (!dbo)
        g_print ("Table not found\n");
else {
        GSList *list;
        for (list = GDA_META_TABLE (dbo)->columns; list; list = list->next) {
                GdaMetaTableColumn *tcol = GDA_META_TABLE_COLUMN (list->data);
                g_print ("COLUMN: %s (%s)\n", tcol->column_name, tcol->column_type);
        }
}
gda_meta_struct_free (mstruct);
  </programlisting>
  If now the database object type is not known, one can use the following code:
  <programlisting>
GdaMetaStruct *mstruct;
GdaMetaDbObject *dbo;
GValue *catalog, *schema, *name;

/* Define name (and optionnally catalog and schema) */
[...]

mstruct = gda_meta_struct_new ();
gda_meta_struct_complement (mstruct, store, GDA_META_DB_UNKNOWN, catalog, schema, name, NULL);
dbo = gda_meta_struct_get_db_object (mstruct, catalog, schema, name);
if (!dbo)
        g_print ("Object not found\n");
else {
        if ((dbo->obj_type == GDA_META_DB_TABLE) || (dbo->obj_type == GDA_META_DB_VIEW)) {
                if (dbo->obj_type == GDA_META_DB_TABLE)
                        g_print ("Is a table\n");
                else if (dbo->obj_type == GDA_META_DB_VIEW) {
                        g_print ("Is a view, definition is:\n");
                        g_print ("%s\n", GDA_META_VIEW (dbo)->view_def);
                }

                GSList *list;
                for (list = GDA_META_TABLE (dbo)->columns; list; list = list->next) {
                        GdaMetaTableColumn *tcol = GDA_META_TABLE_COLUMN (list->data);
                        g_print ("COLUMN: %s (%s)\n", tcol->column_name, tcol->column_type);
                }
        }
        else 
                g_print ("Not a table or a view\n");
}
gda_meta_struct_free (mstruct);
  </programlisting>
</para>

<!-- ##### SECTION See_Also ##### -->
<para>

</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### STRUCT GdaMetaStruct ##### -->
<para>

</para>


<!-- ##### ARG GdaMetaStruct:features ##### -->
<para>

</para>

<!-- ##### ARG GdaMetaStruct:meta-store ##### -->
<para>

</para>

<!-- ##### ENUM GdaMetaStructFeature ##### -->
<para>
  Controls which features are computed about database objects.
</para>

@GDA_META_STRUCT_FEATURE_NONE: database objects only have their own attributes
@GDA_META_STRUCT_FEATURE_FOREIGN_KEYS: foreign keys are computed for tables
@GDA_META_STRUCT_FEATURE_VIEW_DEPENDENCIES: for views, the tables they use are also computed
@GDA_META_STRUCT_FEATURE_ALL: all the features are computed

<!-- ##### ENUM GdaMetaStructError ##### -->
<para>

</para>

@GDA_META_STRUCT_UNKNOWN_OBJECT_ERROR: 
@GDA_META_STRUCT_DUPLICATE_OBJECT_ERROR: 
@GDA_META_STRUCT_INCOHERENCE_ERROR: 

<!-- ##### ENUM GdaMetaDbObjectType ##### -->
<para>
  Type of database object represented by a #GdaMetaDbObject structure
</para>

@GDA_META_DB_UNKNOWN: unknown type, we only know the object exists
@GDA_META_DB_TABLE: the object is a table
@GDA_META_DB_VIEW: the object is a view

<!-- ##### STRUCT GdaMetaDbObject ##### -->
<para>
  Struture to hold information about each database object (tables, views, triggers, ...)
</para>
<para>
  Note: @obj_catalog, @obj_schema, @obj_name, @obj_short_name and @obj_full_name are case sensitive:
  one must call gda_sql_identifier_needs_quotes() to know if is it is necessary to surround by double quotes
  before using in an SQL statement
</para>

@obj_type: 
@outdated: 
@obj_catalog: 
@obj_schema: 
@obj_name: 
@obj_short_name: 
@obj_full_name: 
@obj_owner: 
@depend_list: 

<!-- ##### MACRO GDA_META_DB_OBJECT ##### -->
<para>

</para>

@x: 


<!-- ##### MACRO GDA_META_TABLE ##### -->
<para>

</para>

@dbobj: 


<!-- ##### MACRO GDA_META_VIEW ##### -->
<para>

</para>

@dbobj: 


<!-- ##### STRUCT GdaMetaTable ##### -->
<para>

</para>

@columns: 
@pk_cols_array: 
@pk_cols_nb: 
@reverse_fk_list: 
@fk_list: 

<!-- ##### STRUCT GdaMetaView ##### -->
<para>

</para>

@table: 
@view_def: 
@is_updatable: 

<!-- ##### STRUCT GdaMetaTableColumn ##### -->
<para>

</para>

@column_name: 
@column_type: 
@gtype: 
@pkey: 
@nullok: 
@default_value: 

<!-- ##### MACRO GDA_META_TABLE_COLUMN ##### -->
<para>

</para>

@x: 


<!-- ##### FUNCTION gda_meta_table_column_get_attribute ##### -->
<para>

</para>

@tcol: 
@attribute: 
@Returns: 


<!-- ##### FUNCTION gda_meta_table_column_set_attribute ##### -->
<para>

</para>

@tcol: 
@attribute: 
@value: 
@destroy: 


<!-- ##### MACRO gda_meta_table_column_set_attribute_static ##### -->
<para>

</para>

@column: 
@attribute: 
@value: 


<!-- ##### FUNCTION gda_meta_table_column_foreach_attribute ##### -->
<para>

</para>

@tcol: 
@func: 
@data: 


<!-- ##### STRUCT GdaMetaTableForeignKey ##### -->
<para>

</para>

@meta_table: 
@depend_on: 
@cols_nb: 
@fk_cols_array: 
@fk_names_array: 
@ref_pk_cols_array: 
@ref_pk_names_array: 

<!-- ##### MACRO GDA_META_TABLE_FOREIGN_KEY ##### -->
<para>

</para>

@x: 


<!-- ##### MACRO GDA_META_STRUCT_ERROR ##### -->
<para>

</para>



<!-- ##### FUNCTION gda_meta_struct_new ##### -->
<para>

</para>

@store: 
@features: 
@Returns: 


<!-- ##### FUNCTION gda_meta_struct_complement ##### -->
<para>

</para>

@mstruct: 
@type: 
@catalog: 
@schema: 
@name: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_meta_struct_complement_schema ##### -->
<para>

</para>

@mstruct: 
@catalog: 
@schema: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_meta_struct_complement_default ##### -->
<para>

</para>

@mstruct: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_meta_struct_complement_all ##### -->
<para>

</para>

@mstruct: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_meta_struct_complement_depend ##### -->
<para>

</para>

@mstruct: 
@dbo: 
@error: 
@Returns: 


<!-- ##### ENUM GdaMetaSortType ##### -->
<para>

</para>

@GDA_META_SORT_ALHAPETICAL: sort by alphabetical order on the schema name and on the object name
@GDA_META_SORT_DEPENDENCIES: sort such as that for any given #GdaMetaDbObject in the list, all its dependencies are _before_ it in the list

<!-- ##### FUNCTION gda_meta_struct_sort_db_objects ##### -->
<para>

</para>

@mstruct: 
@sort_type: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_meta_struct_get_all_db_objects ##### -->
<para>

</para>

@mstruct: 
@Returns: 


<!-- ##### FUNCTION gda_meta_struct_get_db_object ##### -->
<para>

</para>

@mstruct: 
@catalog: 
@schema: 
@name: 
@Returns: 


<!-- ##### FUNCTION gda_meta_struct_get_table_column ##### -->
<para>

</para>

@mstruct: 
@table: 
@col_name: 
@Returns: 


<!-- ##### ENUM GdaMetaGraphInfo ##### -->
<para>

</para>

@GDA_META_GRAPH_COLUMNS: 

<!-- ##### FUNCTION gda_meta_struct_dump_as_graph ##### -->
<para>

</para>

@mstruct: 
@info: 
@error: 
@Returns: 


