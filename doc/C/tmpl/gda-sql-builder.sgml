<!-- ##### SECTION Title ##### -->
GdaSqlBuilder

<!-- ##### SECTION Short_Description ##### -->
Factory object for statements

<!-- ##### SECTION Long_Description ##### -->
<para>
  The #GdaSqlBuilder can be used to build a #GdaStatement from its structural description,
  much in the same way a #GdaSqlParser can be used to build a #GdaStatement from an SQL
  string.
</para>
<para>
  The #GdaBuilder internally constructs a #GdaSqlStatement and uses it when requested to produce
  a #GdaStatement (see gda_sql_builder_get_statement()), or a #GdaSqlStatement (see
  gda_sql_builder_get_sql_statement()).
</para>
<para>
  During the building process, some pieces of the statement are constructed, and assembled into the
  final statement. Each of these pieces can be reused anytime in the same #GdaBuilder object, and each
  is identified using a single unsigned integer ID. That ID is dynamically allocated by the object.
</para>
<para>
  The following example builds the equivalent of the <![CDATA["name='joe' AND age >= ##ageparam::int"]]> expression:
  <programlisting><![CDATA[
GdaSqlBuilder *b=...
guint id_field = gda_sql_builder_add_id (b, "name"); // build the "name" SQL identifier
guint id_value = gda_sql_builder_add_expr (b, NULL, G_TYPE_STRING, "joe"); // 'joe' expression
guint id_cond1 = gda_sql_builder_add_cond (b, GDA_SQL_OPERATOR_TYPE_EQ, id_field, id_value, 0); // "name='joe'"

guint id_cond2 = gda_sql_builder_add_cond (b, GDA_SQL_OPERATOR_TYPE_GT,
       gda_sql_builder_add_id (b, "age"), // build the "age" SQL identifier
       gda_sql_builder_add_param (b, "ageparam", G_TYPE_INT, FALSE), // parameter
       0);
guint id_cond_and = gda_sql_builder_add_cond (b, GDA_SQL_OPERATOR_TYPE_AND, id_cond1, id_cond2, 0); // whole expression
]]></programlisting>
</para>
<para>
  For more examples, see the <link linkend="howto-sqlbuilder">Build statements without using a parser</link> section.
</para>

<!-- ##### SECTION See_Also ##### -->
<para>
 
</para>

<!-- ##### SECTION Stability_Level ##### -->


<!-- ##### SECTION Image ##### -->


<!-- ##### STRUCT GdaSqlBuilder ##### -->
<para>

</para>


<!-- ##### ARG GdaSqlBuilder:stmt-type ##### -->
<para>

</para>

<!-- ##### TYPEDEF GdaSqlBuilderId ##### -->
<para>

</para>


<!-- ##### FUNCTION gda_sql_builder_new ##### -->
<para>

</para>

@stmt_type: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_get_statement ##### -->
<para>

</para>

@builder: 
@error: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_get_sql_statement ##### -->
<para>

</para>

@builder: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_set_table ##### -->
<para>

</para>

@builder: 
@table_name: 


<!-- ##### FUNCTION gda_sql_builder_add_field_value ##### -->
<para>

</para>

@builder: 
@field_name: 
@type: 
@Varargs: 


<!-- ##### FUNCTION gda_sql_builder_add_field_value_as_gvalue ##### -->
<para>

</para>

@builder: 
@field_name: 
@value: 


<!-- ##### FUNCTION gda_sql_builder_add_field_value_id ##### -->
<para>

</para>

@builder: 
@field_id: 
@value_id: 


<!-- ##### FUNCTION gda_sql_builder_add_function ##### -->
<para>

</para>

@builder: 
@func_name: 
@Varargs: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_add_function_v ##### -->
<para>

</para>

@builder: 
@func_name: 
@args: 
@args_size: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_add_id ##### -->
<para>

</para>

@builder: 
@string: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_add_field_id ##### -->
<para>

</para>

@builder: 
@field_name: 
@table_name: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_add_expr ##### -->
<para>

</para>

@builder: 
@dh: 
@type: 
@Varargs: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_add_expr_value ##### -->
<para>

</para>

@builder: 
@dh: 
@value: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_add_param ##### -->
<para>

</para>

@builder: 
@param_name: 
@type: 
@nullok: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_add_case ##### -->
<para>

</para>

@builder: 
@test_expr: 
@else_expr: 
@Varargs: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_add_case_v ##### -->
<para>

</para>

@builder: 
@test_expr: 
@else_expr: 
@when_array: 
@then_array: 
@args_size: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_add_sub_select ##### -->
<para>

</para>

@builder: 
@sqlst: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_add_cond ##### -->
<para>

</para>

@builder: 
@op: 
@op1: 
@op2: 
@op3: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_add_cond_v ##### -->
<para>

</para>

@builder: 
@op: 
@op_ids: 
@op_ids_size: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_set_where ##### -->
<para>

</para>

@builder: 
@cond_id: 


<!-- ##### FUNCTION gda_sql_builder_select_add_target ##### -->
<para>

</para>

@builder: 
@table_name: 
@alias: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_select_add_target_id ##### -->
<para>

</para>

@builder: 
@table_id: 
@alias: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_select_add_field ##### -->
<para>

</para>

@builder: 
@field_name: 
@table_name: 
@alias: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_select_join_targets ##### -->
<para>

</para>

@builder: 
@left_target_id: 
@right_target_id: 
@join_type: 
@join_expr: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_join_add_field ##### -->
<para>

</para>

@builder: 
@join_id: 
@field_name: 


<!-- ##### FUNCTION gda_sql_builder_select_order_by ##### -->
<para>

</para>

@builder: 
@expr_id: 
@asc: 
@collation_name: 


<!-- ##### FUNCTION gda_sql_builder_select_set_distinct ##### -->
<para>

</para>

@builder: 
@distinct: 
@expr_id: 


<!-- ##### FUNCTION gda_sql_builder_select_set_limit ##### -->
<para>

</para>

@builder: 
@limit_count_expr_id: 
@limit_offest_expr_id: 


<!-- ##### FUNCTION gda_sql_builder_select_set_having ##### -->
<para>

</para>

@builder: 
@cond_id: 


<!-- ##### FUNCTION gda_sql_builder_select_group_by ##### -->
<para>

</para>

@builder: 
@expr_id: 


<!-- ##### FUNCTION gda_sql_builder_compound_add_sub_select ##### -->
<para>

</para>

@builder: 
@sqlst: 


<!-- ##### FUNCTION gda_sql_builder_compound_set_type ##### -->
<para>

</para>

@builder: 
@compound_type: 


<!-- ##### FUNCTION gda_sql_builder_export_expression ##### -->
<para>

</para>

@builder: 
@id: 
@Returns: 


<!-- ##### FUNCTION gda_sql_builder_import_expression ##### -->
<para>

</para>

@builder: 
@expr: 
@Returns: 


