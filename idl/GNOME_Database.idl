#ifndef __GNOME_Database_idl__
#define __GNOME_Database_idl__ 1

#include <Bonobo.idl>

module GNOME {
	module Database {
		/*
		 * Basic types
		 */
		typedef any Value;

		struct Parameter {
			string name;
			Value value;
		};
		typedef sequence<Parameter> ParameterList;

		/*
		 * GDA data types
		 */
		enum Type {
			TYPE_NULL,
			TYPE_BIGINT,
			TYPE_BINARY,
			TYPE_BOOLEAN,
			TYPE_DATE,
			TYPE_TIME,
			TYPE_TIMESTAMP,
			TYPE_DOUBLE,
			TYPE_INTEGER,
			TYPE_SINGLE,
			TYPE_SMALLINT,
			TYPE_TINYINT,
			TYPE_STRING,
			TYPE_UNKNOWN
		};

		struct Date{
			short year;
			unsigned short month;
			unsigned short day;
		};
		struct Time {
			unsigned short hour;
			unsigned short minute;
			unsigned short second;
		};
		struct Timestamp {
			short year;
			unsigned short month;
			unsigned short day;
			unsigned short hour;
			unsigned short minute;
			unsigned short second;
			unsigned long  fraction;
		};

		/*
		 * Error management
		 */
		struct Error {
			string description;
			long   number;
			string source;
			string sqlstate;
		};

		typedef sequence<Error> ErrorSeq;

		exception DriverError {
			ErrorSeq errors;
			string   realcommand;
		};

		/*
		 * The Recordset interface contains all information
		 * about a set of rows returned by the underlying
		 * provider as a result of executing a command
		 */
		struct FieldAttributes {
			long    definedSize;
			string  name;
			long    scale;
			Type    gdaType;
		};
		struct Field {
			long actualSize;
			Value value;
			FieldAttributes attributes;
		};
		typedef sequence<FieldAttributes> RowAttributes;
		typedef sequence<Field> Row;

		interface Recordset : Bonobo::Unknown {
			RowAttributes describe () raises (DriverError);
			long getRowCount ();

			boolean moveFirst () raises (DriverError);
			boolean moveNext () raises (DriverError);
			boolean movePrevious () raises (DriverError);
			boolean moveLast () raises (DriverError);

			Row fetch () raises (DriverError);
		};
		typedef sequence<Recordset> RecordsetList;

		/*
		 * The Command struct contains information about a
		 * command to be executed on the server
		 */
		enum CommandType {
			COMMAND_TYPE_SQL,
			COMMAND_TYPE_XML,
			COMMAND_TYPE_PROCEDURE,
			COMMAND_TYPE_TABLE,
			COMMAND_TYPE_INVALID
		};

		struct Command {
			string text;
			CommandType type;
		};

		/*
		 * The Client interface is implemented by GDA clients,
		 * and is used by providers to communicate stuff to
		 * connected clients.
		 */
		enum ActionId {
			ACTION_CLIENT_CONNECTED,
			ACTION_CLIENT_EXITED,
			ACTION_TRANSACTION_STARTED,
			ACTION_TRANSACTION_FINISHED,
			ACTION_TRANSACTION_ABORTED
		};

		interface Client : Bonobo::Unknown {
			void notifyAction (in ActionId action, in ParameterList params);
		};

		/*
		 * The Connection interface provides access to an
		 * open database connection.
		 */
		typedef string TransactionId;

		enum Feature {
			FEATURE_TRANSACTIONS
		};

		interface Connection : Bonobo::Unknown {
			/* opening/closing connections */
			boolean open (in Client client,
				      in string cnc_string,
				      in string username,
				      in string password) raises (DriverError);
			boolean close () raises (DriverError);

			/* command execution */
			RecordsetList executeCommand (in Command cmd,
						      in ParameterList params)
				raises (DriverError);

			/* transactions */
			boolean beginTransaction (in TransactionId id) raises (DriverError);
			boolean commitTransaction (in TransactionId id) raises (DriverError);
			boolean rollbackTransaction (in TransactionId id) raises (DriverError);

			/* information about the connection */
			boolean supports (in Feature feature);

			/* schemas */
			enum Schema {
				SCHEMA_PROCEDURES,
				SCHEMA_TABLES,
				SCHEMA_TYPES,
				SCHEMA_VIEWS
			};

			Recordset getSchema (in Schema schema, in ParameterList params);
		};

		/*
		 * The Provider interface is the CORBA interface to be
		 * implemented by the different providers
		 */
		interface Provider : Bonobo::Unknown {
			/* information methods */
			string getVersion ();

			/* basic operations */
			Connection createConnection ();
		};
	};

};

#endif


