Released 4.1.0

2009-04-18  Vivien Malerba <malerba@gnome-db.org>

	* libgda/sqlite/sqlite-src: uses SQLite version 3.6.13

2009-04-18  Vivien Malerba <malerba@gnome-db.org>

	* providers/postgres/gda-postgres-provider.c: display a warning when
	the PostgreSQL provider does not identify any data type

2009-04-17  Vivien Malerba <malerba@gnome-db.org>

	* libgda/sqlite/gda-sqlite.h:
	* libgda/sqlite/gda-sqlite-meta.c:
	* libgda/sqlite/gda-sqlite-provider.c: make the SQLite
	provider compile with a system installed SQLite

2009-04-17  Vivien Malerba <malerba@gnome-db.org>

	* providers/postgres/gda-postgres-provider.c: fix for bug #578748
	* libgda/thread-wrapper/gda-thread-wrapper.c: don't attempt to create a GdaThreadWrapper
	object if g_thread_supported() is FALSE
	* libgda/thread-wrapper/Makefile.am:
	* libgda/thread-wrapper/gda-thread-meta.[ch]: meta data retreival implementation
	* libgda/thread-wrapper/gda-thread-provider.[ch]:
	  - reuse the same GdaThreadWrapper object for providers which can only be
	    accessed from a single thread
	  - correctly behave when g_thread_supported() is FALSE
	  - use new implementation of meta data retreival
	* libgda/gda-server-provider.c: doc. correction
	* libgda/gda-connection.c:
	  - removed debug message
	  - corrected locking in gda_connection_update_meta_store()
	  - return an error if the GDA_CONNECTION_OPTIONS_THREAD_SAFE flag is specified
	    but g_thread_supported() is FALSE
	  - gda_connection_update_meta_store()'s implementation is now generic (no specific
	    implementation for connections which use a thread wrapper)
	* tools/gda-sql.c:
	  - use the GDA_CONNECTION_OPTIONS_THREAD_SAFE flag when opening connections
	  - meta data retreival is now done in the background (statements can be executed
	    while it is being done)
	* libgda/Makefile.am:
	* libgda/libgda.symbols:
	* libgda/gda-repetitive-statement.[ch]: new object to prepare the execution of
	a statement with several differents variables' values sets
	* libgda/gda-connection.c: added gda_connection_repetitive_statement_execute()
	* doc/C: doc.update
	* configure.in: a system installed SQLite is now only searched for if the
	--enable-system-sqlite option is passed, and the presence of the sqlite3CreateFunc
	symbol is not anymore required. The only drawback of using a system installed
	SQLite is that meta data regarding functions will not be available
	* Makefile.am:
	* samples/MetaStore/background.c:
	* samples/MetaStore/README: new example showing how to update the meta data
	in the background (in a sub thread) using the GdaThreadWrapper object
	* libgda/handlers/gda-handler-time.c: fix mem leak
	* samples/SqlBuilder/example.c:
	* libgda/gda-sql-builder.[ch]: improved API and features of the GdaSqlBuilder
	object
	* libgda.doap: project description

2009-04-14  Vivien Malerba <malerba@gnome-db.org>

	* libgda/thread-wrapper/Makefile.am:
	* libgda/thread-wrapper/gda-thread-blob-op.[ch]: wrapper for GdaBlobOp
	objects
	* libgda/thread-wrapper/gda-thread-wrapper.[ch]:
	  - loosened locking
	  - allow the wrapped thread to use the GdaThreadWrapper object
	  - API change in gda_thread_wrapper_fetch_result()
	* libgda/thread-wrapper/gda-thread-recordset.c:
	  - use the new GdaThreadBlobOp object
	  - adaptations to the API change in gda_thread_wrapper_fetch_result()
	* libgda/thread-wrapper/gda-thread-provider.[ch]:
	  - renamed gda_thread_provider_get_type() to _gda_thread_provider_get_type()
	    to avoid exporting the symbol
	  - implemented asynchronous execution
	  - adaptations to the API change in gda_thread_wrapper_fetch_result()
	* tests/multi-threading/check_wrapper.c:
	  - adaptations to the API change in gda_thread_wrapper_fetch_result()
	* libgda/gda-connection.c:
	  - instanciate the database provider only when really needed
	  - loosened locking
	* tools/test_blob.sh: adapted to version 4.1
	* doc/C: doc. updates regarding multi-threading and asynchronous statement
	execution
	* Makefile.am:
	* samples/Makefile:
	* samples/README:
	* samples/AsyncExec: new example about hos to use the asynchronous statement
	execution API

2009-04-07  Vivien Malerba <malerba@gnome-db.org>

	* configure.in:
	* libgda/Makefile.am:
	* libgda/thread-wrapper/Makefile.am: new directory
	* libgda/thread-wrapper/gda-thread-wrapper.[ch]: new object which
	allows one to execute functions in a private sub thread from any
	other thread.
	* libgda/thread-wrapper/gda-thread-provider.[ch]:
	* libgda/thread-wrapper/gda-thread-recordset.[ch]: new built-in
	pseudo provider to constrain a GdaConnection's usage within a private
	sub thread, making its usage completely thread safe
	* libgda/gda-connection-sqlite.h: file renamed to
	libgda/gda-connection-internal.h
	* libgda/gda-connection.[ch]:
	  - added a GDA_CONNECTION_OPTIONS_THREAD_SAFE flag to use when opening
	    a connection
	  - added asynchronous statement execution methods:
	    gda_connection_async_statement_execute(), gda_connection_async_fetch_result()
	    and gda_connection_async_cancel()
	  - the GdaConnection can now be created by the new GdaThreadProvider pseudo
	    provider to wrap a real GdaConnection object in a private sub thread
	* libgda/providers-support/gda-data-select-priv.h:
	* libgda/gda-data-select.c: adaptations to be used by the new GdaThreadRecordset
	* libgda/gda-meta-store.c:
	  - now thread safe
	  - corrections to gda_meta_store_schema_get_structure()
	* libgda/gda-server-provider.[ch]: new virtual method to handle async. requests
	* libgda/sqlite/gda-sqlite-recordset.c: minor correction
	* po/POTFILES.in: added new files
	* providers/postgres/gda-postgres-util.c:
	* providers/postgres/gda-postgres.h: make sure a PostgreSQL connection is only
	used by one statement at a time
	* doc/C: doc. updates
	* tests/multi-threading/dummy-object.[ch]:
	* tests/multi-threading/check_wrapper.c: new test for the GdaThreadWrapper object
	* tests/multi-threading/check_threaded_cnc: new test for connections opened with
	the GDA_CONNECTION_OPTIONS_THREAD_SAFE flag
	* tools/web-server.c: don't check for uint8_t

2009-03-27  Vivien Malerba <malerba@gnome-db.org>

	Merged changes from LIBGDA_4.0 branch between revisions 3362 and 3370

2009-03-25  Vivien Malerba <malerba@gnome-db.org>

	* libgda/gda-tree-mgr-select.c: fix error message, for bug #576730

2009-03-23  Vivien Malerba <malerba@gnome-db.org>

	* po/POTFILES.in: added libgda/gda-sql-builder.c
	* configure.in: don't override MYSQL_CFLAGS if it has already been set as
	an environment variable

2009-03-19  Vivien Malerba <malerba@gnome-db.org>

	* libgda/Makefile.am:
	* libgda/libgda.h.in:
	* libgda/gda-sql-builder.[ch]: new object to build GdaStatement iterativaly
	* Makefile.am:
	* samples/: new example illustrating how to use the new #GdaSqlBuilder object
	* doc/C:
	  - document GdaSqlBuilder
	  - have 'make distcheck' work again

2009-03-17  Vivien Malerba <malerba@gnome-db.org>

	* tools/Makefile.am: set binaries extension to 4.1
	* Changelog: splitted changes before 4.0 to ChangeLog-pre-4.0
	* libgda/Makefile.am:
	* libgda/libgda.symbols:
	* libgda/libgda.h.in:
	* libgda/gda-decl.h:
	* libgda/gda-tree.[ch]:
	* libgda/gda-tree-node.[ch]:
	* libgda/gda-tree-manager.[ch]:
	* libgda/gda-tree-mgr-label.[ch]:
	* libgda/gda-tree-mgr-schemas.[ch]:
	* libgda/gda-tree-mgr-tables.[ch]:
	* libgda/gda-tree-mgr-columns.[ch]:
	* libgda/gda-tree-mgr-select.[ch]: new GdaTree and related implementation
	* Makefile.am:
	* samples/: added a Tree example to show how to use GdaTree
	* po/POTFILES.in: added new files
	* libgda/gda-set.h: doc. update
	* doc/C:
	  - doc. updates for GdaTree and related
	  - added a deprecated symbols section
	  - added new symbols for 4.2 section
	  - added version number

2009-03-16  Vivien Malerba <malerba@gnome-db.org>

	* configure.in:
	  - set version to 4.1.0
	  - increased library version

Released 4.0.0
