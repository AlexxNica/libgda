%at{
/* XmlQuery: the xml query object
 * Copyright (C) 2000 Gerhard Dieringer
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
%}
%h{

#include "xml-query-item.h"

%}


%{

#include "utils.h"


%}


class Xml:Query:List from Xml:Query:Item {
    private GSList *list     = NULL  destroywith xml_query_list_unref_list;


    public Xml:Query:Item *
    new(gchar *tag)
    {
	XmlQueryItem *list = (XmlQueryItem *)GET_NEW;

        xml_query_item_set_tag(list,tag);

	return list;
    }


    override (Xml:Query:Item) void
    add(Xml:Query:Item *parent, Xml:Query:Item *child (check type))
    {
	Self *self = SELF(parent);

        self->_priv->list = g_slist_append(self->_priv->list,child);

        xml_query_item_set_parent(child,parent);
    }

    override (Xml:Query:Item) xmlNode *
    to_dom(Xml:Query:Item *parent, xmlNode *parNode)
    {
        Self *self = SELF(parent);
        xmlNode *node;

        node = PARENT_HANDLER(parent,parNode);
        g_slist_foreach(self->_priv->list,(GFunc)xml_query_item_to_dom,node);

        return node;
    }


    public void
    unref_list(GSList *list)
    {
        g_slist_foreach(list,(GFunc)gtk_object_unref,NULL);
        g_slist_free(list);
    }


    public XmlQueryItem *
    new_setlist(void)
    {
        return xml_query_list_new("setlist");
    }


    public XmlQueryItem *
    new_sourcelist(void)
    {
        return xml_query_list_new("sourcelist");
    }


    public XmlQueryItem *
    new_targetlist(void)
    {
        return xml_query_list_new("targetlist");
    }


    public XmlQueryItem *
    new_order(void)
    {
        return xml_query_list_new("order");
    }


    public XmlQueryItem *
    new_dest(void)
    {
        return xml_query_list_new("dest");
    }


    public XmlQueryItem *
    new_arglist(void)
    {
        return xml_query_list_new("arglist");
    }


    public XmlQueryItem *
    new_valuelist(void)
    {
        return xml_query_list_new("valuelist");
    }


    public XmlQueryItem *
    new_joinlist(void)
    {
        return xml_query_list_new("joinlist");
    }


    public XmlQueryItem *
    new_and(void)
    {
        return xml_query_list_new("and");
    }


    public XmlQueryItem *
    new_or(void)
    {
        return xml_query_list_new("or");
    }


    public XmlQueryItem *
    new_group(void)
    {
        return xml_query_list_new("group");
    }

    override (Xml:Query:Item) Xml:Query:Item *
    find_id(Xml:Query:Item *parent, gchar *id)
    {
        XmlQueryItem *item;
        Self         *self = SELF(parent);
        GSList       *list;

        item = PARENT_HANDLER(parent,id);
        if (item != NULL)
            return item;

        for (list = self->_priv->list; list != NULL; list = list->next) {
            item = xml_query_item_find_id(list->data,id);
            if (item != NULL)
                return item;
        } 
        return NULL;
    }



}


