%at{
/* XmlQuery: the xml query object
 * Copyright (C) 2000 Gerhard Dieringer
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
%}
%h{

#include "xml-query-item.h"

%}


%{

#include "utils.h"

static void
destroy_object_list(GSList *list);

%}


class Xml:Query:Stack from Gtk:Object {
    private GSList *list  = NULL   destroywith destroy_object_list;


    public Xml:Query:Stack *
    new(void)
    {
        return (GET_NEW);
    }


    public void
    push(self, Xml:Query:Item *item (check null type))
    {
        gtk_object_ref(GTK_OBJECT(item));
        self->_priv->list = g_slist_prepend(self->_priv->list,item);
    }


    public Xml:Query:Item *
    pop(self)
    {
        GSList       *list;
        XmlQueryItem *item;

        list = self->_priv->list;
        g_return_val_if_fail(list != NULL,NULL);
        item = list->data;
        gtk_object_unref(GTK_OBJECT(item));
        self->_priv->list = list->next;
        g_slist_free_1(list);

        return item;        
    }


    public gboolean
    empty(self)
    {
        return (self->_priv->list == NULL) ? TRUE : FALSE;
    }

}



%{


static void
destroy_object_list(GSList *list)
{
    g_slist_foreach(list,(GFunc)gtk_object_unref,NULL);
    g_slist_free(list);
}


%}


