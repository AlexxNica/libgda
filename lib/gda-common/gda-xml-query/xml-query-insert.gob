%at{
/* XmlQuery: the xml query object
 * Copyright (C) 2000 Gerhard Dieringer
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
%}
%h{

#include "xml-query-dml.h"

%}


%{

#include "xml-query-dml-private.h"
#include "utils.h"
#include "xml-query-atom.h"
#include "xml-query-list.h"
#include "xml-query-func.h"
#include "xml-query-field.h"
#include "xml-query-value.h"
#include "xml-query-const.h"


%}


class Xml:Query:Insert from Xml:Query:Dml {

    public Xml:Query:Item *
    new(void)
    {
        XmlQueryItem *insert;

        insert = (XmlQueryItem *)(GET_NEW);
        xml_query_item_set_tag(insert,"insert");

        return insert;
    }


    override (Xml:Query:Item) void
    add(Xml:Query:Item *parent, Xml:Query:Item *child (check type))
    {
        XmlQueryDml *dml = XML_QUERY_DML(parent);
        gchar *childtag = xml_query_item_get_tag(child);

        if (!strcmp(childtag,"target")) {
	    if (dml->_priv->target != NULL)
		gtk_object_unref(GTK_OBJECT(dml->_priv->target));
            dml->_priv->target = child;
        } else if (!strcmp(childtag,"dest")) {
	    if (dml->_priv->dest != NULL)
		gtk_object_unref(GTK_OBJECT(dml->_priv->dest));
            dml->_priv->dest = child;
        } else if (!strcmp(childtag,"sourcelist")) {
	    if (dml->_priv->source != NULL)
		gtk_object_unref(GTK_OBJECT(dml->_priv->source));
            dml->_priv->source = child;
        } else {
            g_warning("Invalid objecttype in insert\n");
            return;
	}

        xml_query_item_set_parent(child,parent);
    }


    override (Xml:Query:Dml) XmlQueryItem *
    add_field_from_text(Xml:Query:Dml *parent, 
                        gchar *id,
                        gchar *name, gchar *alias, gboolean group)
    {
        XmlQueryDml   *dml = XML_QUERY_DML(parent);
	XmlQueryItem  *field;

         if (dml->_priv->dest == NULL)
             dml->_priv->dest = xml_query_list_new_dest();

         field = xml_query_field_new_with_data(id,name,alias);
         xml_query_item_add(dml->_priv->dest,field);
	 return field;
    }


    override (Xml:Query:Dml) Xml:Query:Item *
    add_const_from_text(Xml:Query:Dml *parent,
                        gchar *value, gchar *type, gboolean null)
    {
        XmlQueryDml   *dml = XML_QUERY_DML(parent);
        XmlQueryItem  *it_const;

        if (dml->_priv->source == NULL)
            dml->_priv->source = xml_query_list_new_sourcelist();

        it_const  = xml_query_const_new_with_data(value,NULL,type,
						  null ? "yes" : "no");

        xml_query_item_add(dml->_priv->source,it_const);

        return it_const;
    }


    override (Xml:Query:Dml) void
    add_func(Xml:Query:Dml *parent, Xml:Query:Item *func (check null type))
    {
        XmlQueryDml *dml = XML_QUERY_DML(parent);

        if (dml->_priv->source == NULL)
            dml->_priv->source = xml_query_list_new_sourcelist();

        xml_query_item_add(dml->_priv->source,func);
    }


    override (Xml:Query:Dml) void
    add_query(Xml:Query:Dml *parent, Xml:Query:Item *query (check null type))
    {
        XmlQueryDml *dml = XML_QUERY_DML(parent);

        if (dml->_priv->source != NULL)
            return;

        dml->_priv->source = query;
    }


    override (Xml:Query:Item) gchar *
    to_sql(Xml:Query:Item *parent)
    {
        XmlQueryDml *dml = XML_QUERY_DML(parent);
        gchar          *output, *target, *dest, *source;

        target = TO_SQL(dml->_priv->target);
        dest   = TO_SQL(dml->_priv->dest);
        source = TO_SQL(dml->_priv->source);

        output = g_strdup_printf("insert into %s %s %s",target,dest,source);

        g_free(target);
        g_free(dest);
        g_free(source);

        return output;
    }

}
