%at{
/* XmlQuery: the xml query object
 * Copyright (C) 2000 Gerhard Dieringer
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
%}
%h{

#include "xml-query-item.h"

%}

%{

#include "xml-query-bin.h"
#include "xml-query-list.h"
#include "xml-query-atom.h"
#include "xml-query-target.h"
#include "xml-query-join.h"

%}


class Xml:Query:Dml from Xml:Query:Item {
    private XmlQueryItem   *target     = NULL   destroywith gtk_object_unref;
    private XmlQueryItem   *valuelist  = NULL   destroywith gtk_object_unref;
    private XmlQueryItem   *where      = NULL   destroywith gtk_object_unref;
    private XmlQueryItem   *having     = NULL   destroywith gtk_object_unref;
    private XmlQueryItem   *group      = NULL   destroywith gtk_object_unref;
    private XmlQueryItem   *trailer    = NULL   destroywith gtk_object_unref;
    private XmlQueryItem   *dest       = NULL   destroywith gtk_object_unref;
    private XmlQueryItem   *source     = NULL   destroywith gtk_object_unref;
    private XmlQueryItem   *setlist    = NULL   destroywith gtk_object_unref;

    /* no new method because it's an abstract class */

    virtual gchar *
    add_target_from_text(self, gchar *name, Xml:Query:Item *join)
    {
        XmlQueryItem   *table;

        if (self->_priv->target != NULL) {
            g_warning("multible targets in %s",
                      xml_query_item_get_tag(XML_QUERY_ITEM(self)));
            return NULL;
        }
        table = xml_query_target_new_with_data(NULL,name,join);
        self->_priv->target = table;
/*        xml_query_item_add(self->_priv->target,table); */
         
        return NULL;
    }


    virtual XmlQueryItem *
    add_field_from_text(self, gchar *id, 
                        gchar *name, gchar *alias, gboolean group);

    virtual Xml:Query:Item *
    add_const_from_text(self, gchar *value, gchar *type, gboolean null);

    virtual void
    add_func(self, Xml:Query:Item *item);

    virtual void
    add_query(self, Xml:Query:Item *item);

    virtual void
    add_row_condition(self, Xml:Query:Item *cond, gchar *type)
    {
        XmlQueryItem  *where, *list;
        XmlQueryBin   *bin;
        gchar *tag, *fmt;        

        if (self->_priv->where == NULL) {
            self->_priv->where = xml_query_bin_new_where_with_data(cond);
            return;
        }
        bin   = XML_QUERY_BIN(self->_priv->where);
        where = xml_query_bin_get_child(bin);
        tag   = xml_query_item_get_tag(XML_QUERY_ITEM(where));

        if (!strcmp(tag,type))
            xml_query_item_add(where,cond);
        else {
            fmt = g_strdup_printf(" %s ",type);
            list = xml_query_list_new(type);
            g_free(fmt);
            xml_query_item_add(list,where);
            xml_query_item_add(list,cond);
            gtk_object_ref(GTK_OBJECT(where));
            xml_query_item_add(XML_QUERY_ITEM(bin),list);
        }
    }


    override (Xml:Query:Item) xmlNode *
    to_dom(Xml:Query:Item *parent, xmlNode *parNode)
    {
        Self *self = SELF(parent);
        xmlNode *node;

        node = PARENT_HANDLER(parent,parNode);
        TO_DOM(self->_priv->target,node);
        TO_DOM(self->_priv->valuelist,node);
        TO_DOM(self->_priv->setlist,node);
        TO_DOM(self->_priv->where,node);
        TO_DOM(self->_priv->having,node);
        TO_DOM(self->_priv->group,node);
        TO_DOM(self->_priv->trailer,node);
        TO_DOM(self->_priv->dest,node);
        TO_DOM(self->_priv->source,node);

        return node;
    }


    virtual void
    add_group_condition(self, Xml:Query:Item *cond, gchar *type);

    virtual void
    add_order(self, gint column, gboolean asc);

    virtual void
    add_set(self, Xml:Query:Item *item);

    virtual void
    add_set_const(self, gchar *field, gchar *value, gchar *type, gboolean null);


    override (Xml:Query:Item) Xml:Query:Item *
    find_id(Xml:Query:Item *parent, gchar *id)
    {
        XmlQueryItem *item;
        Self         *self = SELF(parent);

        item = PARENT_HANDLER(parent,id);
        if (item != NULL)
            return item;

        if (self->_priv->target != NULL) {
            item = xml_query_item_find_id(self->_priv->target,id);
            if (item != NULL)
                return item;
        }

        if (self->_priv->valuelist != NULL) {
            item = xml_query_item_find_id(self->_priv->valuelist,id);
            if (item != NULL)
                return item;
        }

        if (self->_priv->where != NULL) {
            item = xml_query_item_find_id(self->_priv->where,id);
            if (item != NULL)
                return item;
        }

        if (self->_priv->having != NULL) {
            item = xml_query_item_find_id(self->_priv->having,id);
            if (item != NULL)
                return item;
        }

        if (self->_priv->group != NULL) {
            item = xml_query_item_find_id(self->_priv->group,id);
            if (item != NULL)
                return item;
        }

        if (self->_priv->trailer != NULL) {
            item = xml_query_item_find_id(self->_priv->trailer,id);
            if (item != NULL)
                return item;
        }

        if (self->_priv->dest != NULL) {
            item = xml_query_item_find_id(self->_priv->dest,id);
            if (item != NULL)
                return item;
        }
  
        if (self->_priv->source != NULL) {
            item = xml_query_item_find_id(self->_priv->source,id);
            if (item != NULL)
                return item;
        }

        if (self->_priv->setlist != NULL) {
            item = xml_query_item_find_id(self->_priv->setlist,id);
            if (item != NULL)
                return item;
        }

        return NULL;
    }



}

