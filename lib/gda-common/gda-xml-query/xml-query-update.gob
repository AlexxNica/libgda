%at{
/* XmlQuery: the xml query object
 * Copyright (C) 2000 Gerhard Dieringer
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
%}
%h{

#include "xml-query-dml.h"

%}


%{


#include "xml-query-dml-private.h"
#include "utils.h"
#include "xml-query-atom.h"
#include "xml-query-func.h"
#include "xml-query-field.h"
#include "xml-query-value.h"
#include "xml-query-const.h"
#include "xml-query-dual.h"
#include "xml-query-list.h"


%}


class Xml:Query:Update from Xml:Query:Dml {

    public Xml:Query:Item *
    new(void)
    {
        XmlQueryItem *update;

        update = (XmlQueryItem *)(GET_NEW);
        xml_query_item_set_tag(update,"update");

        return update;
    }


    override (Xml:Query:Item) void
    add(Xml:Query:Item *parent, Xml:Query:Item *child (check type))
    {
        XmlQueryDml *dml = XML_QUERY_DML(parent);
        gchar *childtag = xml_query_item_get_tag(child);

        if (!strcmp(childtag,"target")) {
	    if (dml->_priv->target != NULL)
		gtk_object_unref(GTK_OBJECT(dml->_priv->target));
            dml->_priv->target = child;
        } else if (!strcmp(childtag,"setlist")) {
	    if (dml->_priv->setlist != NULL)
		gtk_object_unref(GTK_OBJECT(dml->_priv->setlist));
            dml->_priv->setlist = child;
        } else if (!strcmp(childtag,"where")) {
	    if (dml->_priv->where != NULL)
		gtk_object_unref(GTK_OBJECT(dml->_priv->where));
            dml->_priv->where = child;
        } else {
            g_warning("Invalid objecttype in update\n");
            return;
	}

        xml_query_item_set_parent(child,parent);
    }


    override (Xml:Query:Dml) void
    add_set(Xml:Query:Dml *parent, 
            Xml:Query:Item *set (check null type))
    {
        XmlQueryItem *item = XML_QUERY_ITEM(parent);        

        if (parent->_priv->setlist == NULL)
            parent->_priv->setlist = xml_query_list_new_setlist();

        xml_query_item_set_parent(parent->_priv->setlist,item);
        xml_query_item_add(parent->_priv->setlist,set);
    }


    override (Xml:Query:Dml) void
    add_set_const(Xml:Query:Dml *parent, 
            gchar *fname, gchar *value, gchar *type, gboolean null)
    {
        XmlQueryItem *field, *value_it, *set, *item = XML_QUERY_ITEM(parent);

        if (parent->_priv->setlist == NULL)
            parent->_priv->setlist = xml_query_list_new_setlist();

        xml_query_item_set_parent(parent->_priv->setlist,item);

        field = xml_query_field_new_with_data(NULL,fname,NULL);
        value_it = xml_query_const_new_with_data(value,NULL,type,
                                                 null ? "yes" : "no");
        set = xml_query_dual_new_set_with_data(field,value_it);

        xml_query_item_add(parent->_priv->setlist,set);
        
    }


}
