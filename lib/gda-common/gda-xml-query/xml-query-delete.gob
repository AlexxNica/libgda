%at{
/* XmlQuery: the xml query object
 * Copyright (C) 2000 Gerhard Dieringer
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */
%}
%h{

#include "xml-query-dml.h"

%}


%{


#include "xml-query-dml-private.h"
#include "utils.h"
#include "xml-query-atom.h"
#include "xml-query-func.h"
#include "xml-query-field.h"
#include "xml-query-value.h"
#include "xml-query-const.h"
#include "xml-query-dual.h"


%}


class Xml:Query:Delete from Xml:Query:Dml {

    public Xml:Query:Item *
    new(void)
    {
        XmlQueryItem *delete;

        delete = (XmlQueryItem *)(GET_NEW);
        xml_query_item_set_tag(delete,"delete");

        return delete;
    }


    override (Xml:Query:Item) void
    add(Xml:Query:Item *parent, Xml:Query:Item *child (check type))
    {
        XmlQueryDml *dml = XML_QUERY_DML(parent);
        gchar *childtag = xml_query_item_get_tag(child);

        if (!strcmp(childtag,"target")) {
	    if (dml->_priv->target != NULL)
		gtk_object_unref(GTK_OBJECT(dml->_priv->target));
            dml->_priv->target = child;
        } else if (!strcmp(childtag,"where")) {
	    if (dml->_priv->where != NULL)
		gtk_object_unref(GTK_OBJECT(dml->_priv->where));
            dml->_priv->where = child;
        } else {
            g_warning("Invalid objecttype `%s' in delete\n",childtag);
            return;
	}

        xml_query_item_set_parent(child,parent);
    }


    override (Xml:Query:Item) gchar *
    to_sql(Xml:Query:Item *parent)
    {
        XmlQueryDml *dml = XML_QUERY_DML(parent);
        gchar       *output, *target, *where;

        target = TO_SQL(dml->_priv->target);
        where   = TO_SQL(dml->_priv->where);

        output = g_strdup_printf("delete from %s %s",target,where);

        g_free(target);
        g_free(where);

        return output;
    }

}
