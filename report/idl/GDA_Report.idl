/* GDA Report Engine
 * Copyright (C) 2000 Rodrigo Moya
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef __gda_report_idl__
#define __gda_report_idl__

module GDA {
	
	/*
	 * Report I/O operations
	 */
	typedef sequence<octet> ReportStreamChunk;
	interface ReportStream {
		ReportStreamChunk readChunk (in long start, in long size);
		long writeChunk (in ReportStreamChunk data, in long size);
		long getLength ();
	};
	
	/*
	 * Report structure
	 */
	struct ReportAttribute {
		string name;
		string value;
	};
	typedef sequence<ReportAttribute> ReportAttributeList;
	
	interface ReportElement;
	typedef sequence<ReportElement> ReportElementList;
	enum ReportContentType {
		AnElement,
		PCDATA
	};
	union VE switch (ReportContentType) {
		case AnElement :
			ReportElementList elem_list;
		case PCDATA :
			string contents;
	};
	interface ReportElement {
		readonly attribute ReportAttributeList attr_list;
		readonly attribute VE contents;
		
		void              addAttribute (in string name, in string value);
		void              removeAttribute (in string name);
		ReportAttribute   getAttribute (in string name);
		void              setAttribute (in string name, in string value);
		
		ReportElement     addChild (in string name);
		void              removeChild (in ReportElement child);
		ReportElementList getChildren ();
		
		string            getName ();
		void              setName (in string name);
	};
	
	interface ReportFormat {	
		ReportElement getRootElement ();
		ReportStream  getStream ();
	};
	
	/*
	 * Report output format
	 */
	interface ReportConverter {
		readonly attribute string format;
	};
	typedef sequence<ReportConverter> ReportConverterList;
	
	interface ReportOutput : ReportFormat {
		ReportStream convert (in string format, in long flags);
	};
	
	struct ReportParam {
		string name;
		any value;
	};
	typedef sequence<ReportParam> ReportParamList;
	
	interface Report {
		attribute string                name;
		attribute string                description;
		readonly attribute ReportFormat format;
		readonly attribute boolean      isLocked;

		ReportOutput run (in ReportParamList params, in long flags);
		
		/* for shared I/O access */
		void lock   ();
		void unlock ();
	};
	typedef sequence<Report> ReportList;

	/*
	 * The report engine
	 */
	interface ReportEngine {
		readonly attribute ReportConverterList conv_list;
		
		ReportList      queryReports (in string condition, in long flags);
		Report          openReport (in string rep_name);
		
		Report          addReport (in string rep_name, in string description);
		void            removeReport (in string rep_name);
		
		boolean         registerConverter (in string format, in ReportConverter converter);
		void            unregisterConverter (in ReportConverter converter);
		ReportConverter findConverter (in string format);
		
		ReportStream    createStream ();
	};
};

#endif
