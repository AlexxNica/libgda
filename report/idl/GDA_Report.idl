/* GDA Report Engine
 * Copyright (C) 2000 Rodrigo Moya
 * Copyright (C) 2001 Carlos Perelló Marín <carlos@gnome-db.org>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef __gda_report_idl__
#define __gda_report_idl__

module GDA {
	
	enum ReportPositionFreq {
		POSITION_FREQ_FIRST,
		POSITION_FREQ_INSIDE,
		POSITION_FREQ_LAST,
		POSITION_FREQ_ALLBUTFIRST,
		POSITION_FREQ_ALLBUTLAST,
		POSITION_FREQ_FIRSTANDLAST,
		POSITION_FREQ_ALL
	};

	enum ReportPageFreq {
		PAGE_FREQ_EVEN,
		PAGE_FREQ_ODD,
		PAGE_FREQ_ALL
	};

	enum ReportLineStyle {
		LINE_STYLE_NONE,
		LINE_STYLE_SOLID,
		LINE_STYLE_DASH,
		LINE_STYLE_DOT,
		LINE_STYLE_DASHDOT,
		LINE_STYLE_DASHDOTDOT
	};

	enum ReportFontWeight {
		FONT_WEIGHT_LIGHT,
		FONT_WEIGHT_NORMAL,
		FONT_WEIGHT_SEMIBOLD,
		FONT_WEIGHT_BOLD,
		FONT_WEIGHT_BLACK
	};

	enum ReportHAlignment {
		HALIGNMENT_STANDARD,
		HALIGNMENT_LEFT,
		HALIGNMENT_CENTER,
		HALIGNMENT_RIGHT
	};

	enum ReportVAlignment {
		VALIGNMENT_TOP,
		VALIGNMENT_CENTER,
		VALIGNMENT_BOTTOM
	};

	enum ReportSize {
		SIZE_CUT,
		SIZE_SCALE
	};

	enum ReportRatio {
		RATIO_FIXED,
		RATIO_FLOAT
	};

	enum ReportSource {
		SOURCE_INTERN,
		SOURCE_EXTERN
	};

	enum ReportPageSize {
		PAGE_SIZE_A3,
		PAGE_SIZE_A4,
		PAGE_SIZE_A5,
		PAGE_SIZE_A6,
		PAGE_SIZE_B3,
		PAGE_SIZE_B4,
		PAGE_SIZE_B5,
		PAGE_SIZE_B6,
		PAGE_SIZE_LETTER,
		PAGE_SIZE_LEGAL,
		PAGE_SIZE_EXECUTIVE
	};

	enum ReportOrientation {
		ORIENTATION_PORTRAIT,
		ORIENTATION_LANDSCAPE
	};

	enum ReportUnits {
		UNITS_INCH,
		UNITS_CM,
		UNITS_PT
	};

	struct ReportColor {
		short			red;
		short			green;
		short			blue;
	};


	interface ReportElement;
	
	typedef sequence<ReportElement> ReportElementList;

	interface ReportSection {
		exception NoSuchReportElement {};
		attribute boolean active;
		attribute boolean visible;
		attribute float height;
		attribute ReportColor bgcolor;
		attribute ReportColor fgcolor;
		attribute ReportColor bordercolor;
		attribute float borderwidth;
		attribute ReportLineStyle borderstyle;
		attribute string fontfamily;
		attribute short fontsize;
		attribute ReportFontWeight fontweight;
		attribute boolean fontitalic;
		attribute ReportHAlignment halignment;
		attribute ReportVAlignment valignment;
		attribute boolean wordwrap;
		attribute ReportColor negvaluecolor;
		attribute string dateformat;
		attribute unsigned short precision;
		attribute string currency;
		attribute boolean commaseparator;
		attribute float linewidth;
		attribute ReportColor linecolor;
		attribute ReportLineStyle linestyle;

		void			addChild	(in ReportElement child);
		void			removeChild	(in ReportElement child)	raises (NoSuchReportElement);
		ReportElementList	getChildren ();
		
	};
	
	interface ReportHeader : ReportSection {
		attribute boolean newpage;
	};
	
	interface ReportFooter : ReportSection {
		attribute boolean newpage;
	};
	
	interface ReportPageHeader : ReportSection {
		attribute ReportPositionFreq positionfreq;
		attribute ReportPageFreq pagefreq;
	};
	
	interface ReportPageFooter : ReportSection {
		attribute ReportPositionFreq positionfreq;
		attribute ReportPageFreq pagefreq;
	};
	
	interface ReportDataHeader : ReportSection {
	};
	
	interface ReportDataFooter : ReportSection {
	};
	
	interface ReportGroupHeader : ReportSection {
		attribute string groupvar;
		attribute boolean newpage;
	};
	
	interface ReportGroupFooter : ReportSection {
		attribute string groupvar;
		attribute boolean newpage;
	};

	interface ReportDetail : ReportSection {
	};

	interface ReportData {
		attribute ReportGroupHeader	gheader;
		attribute ReportDetail	detail;
		attribute ReportGroupFooter	gfooter;
	};
	
	typedef sequence<ReportData>	ReportDataList;
	
	interface ReportPage {
		attribute ReportPageHeader	pheader;
		attribute ReportDataHeader	dheader;
		attribute ReportDataList	datalist;
		attribute ReportDataFooter	dfooter;
		attribute ReportPageFooter	pfooter;
	};

	typedef sequence<ReportPage> ReportPageList;
	
	typedef string ReportElementType;

	interface ReportElement {
		attribute string name;
		attribute boolean active;
		attribute boolean visible;
		
		ReportElementType getType ();
	};

	typedef sequence<octet> ReportDataStream;
	
	interface ReportPicture : ReportElement {
		attribute float x;
		attribute float y;
		attribute float width;
		attribute float height;
		attribute ReportSize size;
		attribute ReportRatio aspectratio;
		attribute string format;
		attribute ReportSource source;
		attribute ReportDataStream data; /* Perhaps ReportDataStream must be an union? */
		
	};
    		
	interface ReportLine : ReportElement {
		attribute float x1;
		attribute float y1;
		attribute float x2;
		attribute float y2;
		attribute float width;
		attribute ReportColor color;
		attribute ReportLineStyle style;
		
	};

	interface ReportObject : ReportElement {
		exception InvalidPosition {};
		exception InvalidGeometry {};
		
		attribute float x;
		attribute float y;
		attribute float width;
		attribute float height;
		attribute ReportColor bgcolor;
		attribute ReportColor fgcolor;
		attribute ReportColor bordercolor;
		attribute float borderwidth;
		attribute ReportLineStyle borderStyle;


		void setGeometry (in float x, in float y, in float width, in float height)	raises (InvalidGeometry);
		void move (in float x, in float y)	raises (InvalidPosition);
	};

	interface ReportTextObject : ReportObject {
		attribute string fontfamily;
		attribute short fontsize;
		attribute ReportFontWeight fontweight;
		attribute boolean fontitalic;
		attribute ReportHAlignment halignment;
		attribute ReportVAlignment valignment;
		attribute boolean wordwrap;
	};

	interface ReportLabel : ReportTextObject {
		attribute string text;
	};

	interface ReportSpecial : ReportLabel {
		attribute string dateformat;        
	};

	interface ReportRepField : ReportTextObject {
		attribute string query;
		attribute string value;
		attribute string datatype;
		attribute string dateformat;
		attribute unsigned short precision;
		attribute string currency;
		attribute ReportColor negvaluecolor;
		attribute boolean commaseparator;
	};

	/*
	 * Report I/O operations
	 */
	typedef sequence<octet> ReportStreamChunk;
	interface ReportStream {
		exception InvalidStartPoint {};
		
		ReportStreamChunk readChunk (in long start, in long size)	raises (InvalidStartPoint);
		long writeChunk (in ReportStreamChunk data, in long size);
		long getLength ();
	};

	interface ReportFormat {	
		ReportStream  getStream ();
	};
	
	/*
	 * Report output format
	 */
	interface ReportConverter {
		readonly attribute string format;
	};
	typedef sequence<ReportConverter> ReportConverterList;
	
	interface ReportOutput : ReportFormat {
		exception ConversionNotImplemented {};

		ReportStream convert (in string format, in long flags)	raises (ConversionNotImplemented);
	};
	
	struct ReportParam {
		string name;
		any value;
	};
	
	typedef sequence<ReportParam> ReportParamList;
	
	interface Report {
		exception CanNotGetLock {};
		
		attribute string name;
		attribute string description;
		attribute ReportPageSize pagesize;
		attribute ReportOrientation orientation;
		attribute ReportUnits units;
		attribute float topmargin;
		attribute float bottommargin;
		attribute float leftmargin;
		attribute float rightmargin;
		attribute ReportColor bgcolor;
		attribute ReportColor fgcolor;
		attribute ReportColor bordercolor;
		attribute float borderwidth;
		attribute ReportLineStyle borderstyle;
		attribute string fontfamily;
		attribute short fontsize;
		attribute ReportFontWeight fontweight;
		attribute boolean fontitalic;
		attribute ReportHAlignment halignment;
		attribute ReportVAlignment valignment;
		attribute boolean wordwrap;
		attribute ReportColor negvaluecolor;
		attribute string dateformat;
		attribute unsigned short precision;
		attribute string currency;
		attribute boolean commaseparator;
		attribute float linewidth;
		attribute ReportColor linecolor;
		attribute ReportLineStyle linestyle;

		attribute ReportHeader		rheader;
		attribute ReportPageList	plist;
		attribute ReportFooter		rfooter;
		
		readonly attribute ReportFormat format;
		readonly attribute boolean      isLocked;

		ReportOutput run (in ReportParamList params, in long flags);
		
		/* for shared I/O access */
		void lock   ()	raises (CanNotGetLock);
		void unlock ();
	};

	typedef sequence<Report> ReportList;

	/*
	 * The report engine
	 */
	interface ReportEngine {
		exception NoSuchReport {};
		exception ThisReportExists {};
		
		readonly attribute ReportConverterList convlist;
		
		ReportList      queryReports (in string condition, in long flags);
		Report          openReport (in string repname)	raises (NoSuchReport);
		
		Report          addReport (in string repname, in string description)	raises (ThisReportExists);
		void            removeReport (in string repname)	raises (NoSuchReport);
		
		boolean         registerConverter (in string format, in ReportConverter converter);
		void            unregisterConverter (in ReportConverter converter);
		ReportConverter findConverter (in string format);
		
		ReportStream    createStream ();
	};

};

#endif
