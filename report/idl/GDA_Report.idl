/* GDA Report Engine
 * Copyright (C) 2000 Rodrigo Moya
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef __gda_report_idl__
#define __gda_report_idl__

module GDA {
	module Report {
		/*
		 * Report I/O operations
		 */
		typedef sequence<octet> StreamChunk;
		interface Stream {
			StreamChunk readChunk (in long start, in long size);
			long writeChunk (in StreamChunk data, in long size);
			long getLength ();
		};
	
		/*
		 * Report structure
		 */
		struct Attribute {
			string name;
			string value;
		};
		typedef sequence<Attribute> AttributeList;
	
		interface Element;
		typedef sequence<Element> ElementList;
		enum ContentType {
			AnElement,
			PCDATA
		};
		union VE switch (ContentType) {
			case AnElement :
				ElementList elem_list;
			case PCDATA :
				string contents;
		};
		interface Element {
			readonly attribute AttributeList attr_list;
			readonly attribute VE contents;
		
			void      addAttribute (in string name, in string value);
			void      removeAttribute (in string name);
			Attribute getAttribute (in string name);
			void      setAttribute (in string name, in string value);
		
			Element   addChild    (in string name);
			void      removeChild (in Element child);
			ElementList getChildren ();
		
			string    getName ();
			void      setName (in string name);
		};
	
		interface Format {	
			Element getRootElement ();
			Stream  getStream ();
		};

		/*
		 * Report output format
		 */
		interface Converter {
			readonly attribute string format;
		};
		typedef sequence<Converter> ConverterList;
	
		interface Output : Format {
			Stream convert (in string format, in long flags);
		};

		struct Param {
			string name;
			any value;
		};
		typedef sequence<Param> ParamList;
		interface Report {
			attribute string           name;
			attribute string           description;
			readonly attribute Format  format;
			readonly attribute boolean isLocked;

			Output run (in ParamList params, in long flags);

			/* for shared I/O access */
			void lock   ();
			void unlock ();
		};
		
		typedef sequence<Report> List;

		/*
		 * The report engine
		 */
		interface Engine {
			readonly attribute ConverterList conv_list;
		
			List      queryReports (in string condition, in long flags);
			Report    openReport (in string rep_name);
		
			Report    addReport (in string rep_name, in string description);
			void      removeReport (in string rep_name);
		
			boolean   registerConverter (in string format, in Converter converter);
			void      unregisterConverter (in Converter converter);
			Converter findConverter (in string format);
		
			Stream    createStream ();
		};
	};
};

#endif
