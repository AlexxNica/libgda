/* GDA_Report.idl
 * Copyright (C) 2001, The Free Software Foundation
 *
 * Authors:
 *	Carlos Perelló Marín <carlos@gnome-db.org>
 *
 * GNOME Database Report Engine interfaces.
 */

#ifndef __GDA_Report_idl__
#define __GDA_Report_idl__

#include <Bonobo.idl>
#include <oaf-factory.idl>

module GDA {
	module Report {

		enum PositionFreq {
			POSITION_FREQ_FIRST,
			POSITION_FREQ_INSIDE,
			POSITION_FREQ_LAST,
			POSITION_FREQ_ALLBUTFIRST,
			POSITION_FREQ_ALLBUTLAST,
			POSITION_FREQ_FIRSTANDLAST,
			POSITION_FREQ_ALL
		};

		enum PageFreq {
			PAGE_FREQ_EVEN,
			PAGE_FREQ_ODD,
			PAGE_FREQ_ALL
		};

		enum LineStyle {
			LINE_STYLE_NONE,
			LINE_STYLE_SOLID,
			LINE_STYLE_DASH,
			LINE_STYLE_DOT,
			LINE_STYLE_DASHDOT,
			LINE_STYLE_DASHDOTDOT
		};

		enum FontWeight {
			FONT_WEIGHT_LIGHT,
			FONT_WEIGHT_NORMAL,
			FONT_WEIGHT_SEMIBOLD,
			FONT_WEIGHT_BOLD,
			FONT_WEIGHT_BLACK
		};

		enum HAlignment {
			HALIGNMENT_STANDARD,
			HALIGNMENT_LEFT,
			HALIGNMENT_CENTER,
			HALIGNMENT_RIGHT
		};

		enum VAlignment {
			VALIGNMENT_TOP,
			VALIGNMENT_CENTER,
			VALIGNMENT_BOTTOM
		};

		enum Size {
			SIZE_CUT,
			SIZE_SCALE
		};

		enum Ratio {
			RATIO_FIXED,
			RATIO_FLOAT
		};

		enum Source {
			SOURCE_INTERN,
			SOURCE_EXTERN
		};

		enum PageSize {
			PAGE_SIZE_A3,
			PAGE_SIZE_A4,
			PAGE_SIZE_A5,
			PAGE_SIZE_A6,
			PAGE_SIZE_B3,
			PAGE_SIZE_B4,
			PAGE_SIZE_B5,
			PAGE_SIZE_B6,
			PAGE_SIZE_LETTER,
			PAGE_SIZE_LEGAL,
			PAGE_SIZE_EXECUTIVE,
			PAGE_SIZE_CUSTOM
		};

		enum Orientation {
			ORIENTATION_PORTRAIT,
			ORIENTATION_LANDSCAPE
		};

		enum Units {
			UNITS_INCH,
			UNITS_CM,
			UNITS_PT
		};

		struct Color {
			short red;
			short green;
			short blue;
		};

		interface Element;

		typedef sequence<Element> ElementList;

		interface Section : Bonobo::Unknown {
			exception NoSuchElement  {};
			
			attribute boolean        active;
			attribute boolean        visible;
			attribute float          height;
			attribute Color          bgcolor;
			attribute Color          fgcolor;
			attribute Color          bordercolor;
			attribute float          borderwidth;
			attribute LineStyle      borderstyle;
			attribute string         fontfamily;
			attribute short          fontsize;
			attribute FontWeight     fontweight;
			attribute boolean        fontitalic;
			attribute HAlignment     halignment;
			attribute VAlignment     valignment;
			attribute boolean        wordwrap;
			attribute Color          negvaluecolor;
			attribute string         dateformat;
			attribute unsigned short precision;
			attribute string         currency;
			attribute boolean        commaseparator;
			attribute float          linewidth;
			attribute Color          linecolor;
			attribute LineStyle      linestyle;

			void		addChild    (in Element child);
			void		removeChild (in Element child)
					raises      (NoSuchElement);
			ElementList	getChildren ();
		};

		interface Header : Section {
			attribute boolean newpage;
		};

		interface Footer : Section {
			attribute boolean newpage;
		};

		interface PageHeader : Section {
			attribute PositionFreq positionfreq;
			attribute PageFreq     pagefreq;
		};

		interface PageFooter : Section {
			attribute PositionFreq positionfreq;
			attribute PageFreq     pagefreq;
		};

		interface DataHeader : Section {
		};

		interface DataFooter : Section {
		};

		interface GroupHeader : Section {
			attribute string  groupvar;
			attribute boolean newpage;
		};

		interface GroupFooter : Section {
			attribute string  groupvar;
			attribute boolean newpage;
		};

		interface Detail : Section {
		};

		interface Data {
			attribute GroupHeader gheader;
			attribute Detail      detail;
			attribute GroupFooter gfooter;
		};

		typedef sequence<Data> DataList;

		interface Page : Bonobo::Unknown {
			attribute PageHeader pheader;
			attribute DataHeader dheader;
			attribute DataList   datalist;
			attribute DataFooter dfooter;
			attribute PageFooter pfooter;
		};

		typedef sequence<Page> PageList;

		interface Element : Bonobo::Unknown {
			attribute string name;
			attribute boolean active;
			attribute boolean visible;

		};

		interface Picture : Element {
			attribute float x;
			attribute float y;
			attribute float width;
			attribute float height;
			attribute Size size;
			attribute Ratio aspectratio;
			attribute string format;
			attribute Source source;
			attribute Bonobo::Stream data;
		
		};

		interface Line : Element {
			attribute float x1;
			attribute float y1;
			attribute float x2;
			attribute float y2;
			attribute float width;
			attribute Color color;
			attribute LineStyle style;
		};

		interface RObject : Element {
			exception InvalidPosition {};
			exception InvalidGeometry {};
			
			attribute float x;
			attribute float y;
			attribute float width;
			attribute float height;
			attribute Color bgcolor;
			attribute Color fgcolor;
			attribute Color bordercolor;
			attribute float borderwidth;
			attribute LineStyle borderStyle;

			void setGeometry (in float x, in float y,
					  in float width, in float height)
			     raises (InvalidGeometry);
			void move (in float x, in float y)
			     raises (InvalidPosition);
		};

		interface TextObject : RObject {
			attribute string fontfamily;
			attribute short fontsize;
			attribute FontWeight fontweight;
			attribute boolean fontitalic;
			attribute HAlignment halignment;
			attribute VAlignment valignment;
			attribute boolean wordwrap;

		};

		interface Label : TextObject {
			attribute string text;
		};

		interface Special : Label {
			attribute string dateformat;        
		};

		interface RepField : TextObject {
			attribute string query;
			attribute string value;
			attribute string datatype;
			attribute string dateformat;
			attribute unsigned short precision;
			attribute string currency;
			attribute Color negvaluecolor;
			attribute boolean commaseparator;
		};

		interface Output : Bonobo::Stream {
		};

		interface Converter : Bonobo::Unknown {
			void           saveToFile      (in string uri);
			Bonobo::Stream loadFromFile    (in string uri);
			Bonobo::Stream convert         (in Output output);
			Bonobo::Stream convertFromFile (in string uri);
		};
		
		enum State {
			STATE_EMPTY,
			STATE_DIRTY,
			STATE_SAVED
		};
		
		typedef string           Method;
		typedef sequence<Method> MethodSeq;
	
		struct Param {
			string name;
			any    value;
		};
		typedef sequence<Param>  ParamList;

		interface Document : Bonobo::Unknown {
			exception CanNotGetLock {};
			exception MethodNotSupported {};
			exception IOFailure {};

			attribute string         name;
			attribute string         description;
			attribute PageSize       pagesize;
			attribute Orientation    orientation;
			attribute Units          units;
			attribute float          topmargin;
			attribute float          bottommargin;
			attribute float          leftmargin;
			attribute float          rightmargin;
			attribute Color          bgcolor;
			attribute Color          fgcolor;
			attribute Color          bordercolor;
			attribute float          borderwidth;
			attribute LineStyle      borderstyle;
			attribute string         fontfamily;
			attribute short          fontsize;
			attribute FontWeight     fontweight;
			attribute boolean        fontitalic;
			attribute HAlignment     halignment;
			attribute VAlignment     valignment;
			attribute boolean        wordwrap;
			attribute Color          negvaluecolor;
			attribute string         dateformat;
			attribute unsigned short precision;
			attribute string         currency;
			attribute boolean        commaseparator;
			attribute float          linewidth;
			attribute Color          linecolor;
			attribute LineStyle      linestyle;

			attribute Header         rheader;
			attribute PageList       plist;
			attribute Footer         rfooter;

			readonly attribute boolean isLocked;
			
			State     getState            ();
			MethodSeq getSupportedMethods ();
			void      load                (in string uri)
				  raises              (MethodNotSupported,
						       IOFailure);
			void      save                (in string uri)
				  raises              (MethodNotSupported,
						       IOFailure);
			string    getURI              ();
			void      setURI              (in string uri);
			
			Output    run                 (in ParamList params,
						       in long flags);

			/* for shared I/O access */
			void   lock   ()
			       raises (CanNotGetLock);
			void   unlock ();
		};

		typedef sequence<Document> DocumentList;

		interface DocumentFactory : GNOME::ObjectFactory {

			DocumentList getDocuments ();
		};
	};
};
